###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        04/Sep/2014  10:10:23
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\uC-Probe\Target\Communication\Generic\RS-232\OS\uCOS-II\probe_rs232_os.c
#    Command line =  
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\uC-Probe\Target\Communication\Generic\RS-232\OS\uCOS-II\probe_rs232_os.c"
#        -lcN "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\"
#        -lb "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -o
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM7TDMI -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\BSP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Driver\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Noah\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Shell\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uCOS-II\Source\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uC-CPU\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-LIB\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uCOS-II\Ports\ARM\Generic\IAR\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\Atmel\AT91SAM7X\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Plugins\uCOS-II\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Demos\Intro\Source\"
#        --interwork --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\List\probe_rs232_os.lst
#    Object file  =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\Obj\probe_rs232_os.o
#
###############################################################################

E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\uC-Probe\Target\Communication\Generic\RS-232\OS\uCOS-II\probe_rs232_os.c
      1          /*
      2          *********************************************************************************************************
      3          *                                       uC/Probe Communication
      4          *
      5          *                         (c) Copyright 2007-2008; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                        COMMUNICATION: RS-232
     18          *                                        Micrium uC/OS-II PORT
     19          *
     20          * Filename      : probe_rs232_os.c
     21          * Version       : V2.30
     22          * Programmer(s) : BAN
     23          *********************************************************************************************************
     24          * Note(s)       : (1) This file is the uC/OS-II layer for the uC/Probe RS-232 Communication Module.
     25          *
     26          *                 (2) Assumes uC/OS-II V2.87+ is included in the project build.
     27          *********************************************************************************************************
     28          */
     29          
     30          
     31          /*
     32          *********************************************************************************************************
     33          *                                            INCLUDE FILES
     34          *********************************************************************************************************
     35          */
     36          
     37          #include  <probe_com.h>
     38          #include  <probe_rs232.h>
     39          #include  <ucos_ii.h>
     40          
     41          
     42          /*
     43          *********************************************************************************************************
     44          *                                               ENABLE
     45          *
     46          * Note(s) : (1) See 'probe_rs232.h  ENABLE'.
     47          *********************************************************************************************************
     48          */
     49          
     50          #if (PROBE_COM_CFG_RS232_EN == DEF_ENABLED)                     /* See Note #1.                                         */
     51          
     52          
     53          /*
     54          *********************************************************************************************************
     55          *                                            LOCAL DEFINES
     56          *********************************************************************************************************
     57          */
     58          
     59          
     60          
     61          /*
     62          *********************************************************************************************************
     63          *                                           LOCAL CONSTANTS
     64          *********************************************************************************************************
     65          */
     66          
     67          
     68          /*
     69          *********************************************************************************************************
     70          *                                          LOCAL DATA TYPES
     71          *********************************************************************************************************
     72          */
     73          
     74          
     75          /*
     76          *********************************************************************************************************
     77          *                                            LOCAL TABLES
     78          *********************************************************************************************************
     79          */
     80          
     81          
     82          /*
     83          *********************************************************************************************************
     84          *                                       LOCAL GLOBAL VARIABLES
     85          *********************************************************************************************************
     86          */
     87          
     88          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
     89          static  OS_STK     ProbeRS232_OS_TaskStk[PROBE_RS232_CFG_TASK_STK_SIZE];/* Probe RS-232 task stack.                         */
     90          
     91          #if (OS_SEM_EN > 0)
     92          static  OS_EVENT  *ProbeRS232_OS_Sem;                                   /* Packet receive signal.                           */
     93          #endif
     94          
     95          #endif
     96          
     97          
     98          /*
     99          *********************************************************************************************************
    100          *                                      LOCAL FUNCTION PROTOTYPES
    101          *********************************************************************************************************
    102          */
    103          
    104          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    105          static  void  ProbeRS232_OS_Task(void *p_arg);                          /* Probe RS-232 task.                               */
    106          #endif
    107          
    108          
    109          /*
    110          *********************************************************************************************************
    111          *                                     LOCAL CONFIGURATION ERRORS
    112          *********************************************************************************************************
    113          */
    114          
    115          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED) && (OS_SEM_EN == 0)
    116          #error  "OS_SEM_EN              illegally #define'd in 'os_cfg.h'   "
    117          #error  "                       [MUST be  > 0]                      "
    118          #endif
    119          
    120          
    121          /*
    122          *********************************************************************************************************
    123          *                                         ProbeRS232_OS_Init()
    124          *
    125          * Description : Create RTOS objects for RS-232 communication.
    126          *
    127          * Argument(s) : none.
    128          *
    129          * Return(s)   : DEF_OK,   if OS initialization successful.
    130          *               DEF_FAIL, otherwise.
    131          *
    132          * Caller(s)   : ProbeRS232_Init().
    133          *
    134          * Note(s)     : none.
    135          *********************************************************************************************************
    136          */
    137          
    138          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    139          CPU_BOOLEAN  ProbeRS232_OS_Init (void)
    140          {
    141              INT8U  err;
    142          
    143          
    144              ProbeRS232_OS_Sem = OSSemCreate(0);
    145              if (ProbeRS232_OS_Sem == (OS_EVENT *)0) {
    146                  return (DEF_FAIL);
    147              }
    148          
    149          #if (OS_VERSION < 287)
    150          #if (OS_EVENT_NAME_SIZE > 1)
    151              OSEventNameSet(ProbeRS232_OS_Sem, (INT8U *)"Probe RS-232", &err);
    152          #endif
    153          #else
    154          #if (OS_EVENT_NAME_EN   > 0)
    155              OSEventNameSet(ProbeRS232_OS_Sem, (INT8U *)"Probe RS-232", &err);
    156          #endif
    157          #endif
    158          
    159          #if (OS_TASK_CREATE_EXT_EN > 0)
    160              #if (OS_STK_GROWTH == 1)
    161              err = OSTaskCreateExt( ProbeRS232_OS_Task,
    162                                     (void *)0,
    163                                    &ProbeRS232_OS_TaskStk[PROBE_RS232_CFG_TASK_STK_SIZE - 1],/* Set Top-Of-Stack.                    */
    164                                     PROBE_RS232_CFG_TASK_PRIO,
    165                                     PROBE_RS232_CFG_TASK_PRIO,
    166                                    &ProbeRS232_OS_TaskStk[0],                                /* Set Bottom-Of-Stack.                 */
    167                                     PROBE_RS232_CFG_TASK_STK_SIZE,
    168                                     (void *)0,                                               /* No TCB extension.                    */
    169                                     OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);              /* Enable stack checking + clear stack. */
    170              #else
    171              err = OSTaskCreateExt( ProbeRS232_OS_Task,
    172                                     (void *)0,
    173                                    &ProbeRS232_OS_TaskStk[0],                                /* Set Top-Of-Stack.                    */
    174                                     PROBE_RS232_CFG_TASK_PRIO,
    175                                     PROBE_RS232_CFG_TASK_PRIO,
    176                                    &ProbeRS232_OS_TaskStk[PROBE_RS232_CFG_TASK_STK_SIZE - 1],/* Set Bottom-Of-Stack.                 */
    177                                     PROBE_RS232_TASK_CFG_STK_SIZE,
    178                                     (void *)0,                                               /* No TCB extension.                    */
    179                                     OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);              /* Enable stack checking + clear stack. */
    180              #endif
    181          #else
    182              #if (OS_STK_GROWTH == 1)
    183              err = OSTaskCreate( ProbeRS232_OS_Task,
    184                                  (void *)0,
    185                                 &ProbeRS232_OS_TaskStk[PROBE_RS232_CFG_TASK_STK_SIZE - 1],
    186                                  PROBE_RS232_CFG_TASK_PRIO);
    187              #else
    188              err = OSTaskCreate( ProbeRS232_OS_Task,
    189                                  (void *)0,
    190                                 &ProbeRS232_OS_TaskStk[0],
    191                                  PROBE_RS232_CFG_TASK_PRIO);
    192              #endif
    193          #endif
    194          
    195              if (err != OS_ERR_NONE) {
    196                  return (DEF_FAIL);
    197              }
    198          
    199          #if (OS_VERSION < 287)
    200          #if (OS_TASK_NAME_SIZE > 1)
    201              OSTaskNameSet(PROBE_RS232_CFG_TASK_PRIO, (INT8U *)"Probe RS232", &err);
    202          #endif
    203          #else
    204          #if (OS_TASK_NAME_EN   > 0)
    205              OSTaskNameSet(PROBE_RS232_CFG_TASK_PRIO, (INT8U *)"Probe RS232", &err);
    206          #endif
    207          #endif
    208          
    209              return (DEF_OK);
    210          }
    211          #endif
    212          
    213          
    214          /*
    215          *********************************************************************************************************
    216          *                                       ProbeRS232_OS_Pend()
    217          *
    218          * Description : Wait for a packet to be received.
    219          *
    220          * Argument(s) : none.
    221          *
    222          * Return(s)   : none.
    223          *
    224          * Caller(s)   : ProbeRS232_Task().
    225          *
    226          * Note(s)     : none.
    227          *********************************************************************************************************
    228          */
    229          
    230          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    231          void  ProbeRS232_OS_Pend (void)
    232          {
    233          #if (OS_SEM_EN > 0)
    234              INT8U  err;
    235          
    236          
    237              OSSemPend(ProbeRS232_OS_Sem, 0, &err);                          /* Wait for a packet to be received                     */
    238          #endif
    239          }
    240          #endif
    241          
    242          
    243          /*
    244          *********************************************************************************************************
    245          *                                       ProbeRS232_OS_Post()
    246          *
    247          * Description : Notify a pending task that a packet has been receieved.
    248          *
    249          * Argument(s) : none.
    250          *
    251          * Return(s)   : none.
    252          *
    253          * Caller(s)   : ProbeRS232_RxPkt().
    254          *
    255          * Note(s)     : none.
    256          *********************************************************************************************************
    257          */
    258          
    259          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    260          void  ProbeRS232_OS_Post (void)
    261          {
    262          #if (OS_SEM_EN > 0)
    263              (void)OSSemPost(ProbeRS232_OS_Sem);                             /* A packet has been received                           */
    264          #endif
    265          }
    266          #endif
    267          
    268          
    269          /*
    270          *********************************************************************************************************
    271          *********************************************************************************************************
    272          *                                           LOCAL FUNCTIONS
    273          *********************************************************************************************************
    274          *********************************************************************************************************
    275          */
    276          
    277          /*
    278          *********************************************************************************************************
    279          *                                         ProbeRS232_OS_Task()
    280          *
    281          * Description : Task which waits for packets to be received, formalates responses, and begins transmission.
    282          *
    283          * Argument(s) : p_arg       Argument passed to ProbeRS232_OS_Task() by 'OSTaskCreate()'.
    284          *
    285          * Return(s)   : none.
    286          *
    287          * Caller(s)   : This is a task.
    288          *
    289          * Note(s)     : none.
    290          *********************************************************************************************************
    291          */
    292          
    293          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    294          static  void  ProbeRS232_OS_Task (void *p_arg)
    295          {
    296             (void)&p_arg;
    297              ProbeRS232_Task();
    298          }
    299          #endif
    300          
    301          
    302          /*
    303          *********************************************************************************************************
    304          *                                              ENABLE END
    305          *
    306          * Note(s) : See 'ENABLE  Note #1'.
    307          *********************************************************************************************************
    308          */
    309          
    310          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ProbeRS232_OS_Init
        32   -> OSEventNameSet
        32   -> OSSemCreate
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet
       8   ProbeRS232_OS_Pend
         8   -> OSSemPend
       8   ProbeRS232_OS_Post
         8   -> OSSemPost
       8   ProbeRS232_OS_Task
         8   -> ProbeRS232_Task


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "Probe RS-232">
      12  ?<Constant "Probe RS232">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
     184  ProbeRS232_OS_Init
      32  ProbeRS232_OS_Pend
      24  ProbeRS232_OS_Post
       4  ProbeRS232_OS_Sem
      20  ProbeRS232_OS_Task
     512  ProbeRS232_OS_TaskStk

 
 516 bytes in section .bss
  28 bytes in section .rodata
 280 bytes in section .text
 
 280 bytes of CODE  memory
  28 bytes of CONST memory
 516 bytes of DATA  memory

Errors: none
Warnings: none
