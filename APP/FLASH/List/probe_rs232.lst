###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        05/Sep/2014  09:36:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c
#    Command line =  
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c"
#        -lcN "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\"
#        -lb "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -o
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM7TDMI -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\BSP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Driver\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Noah\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Shell\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uCOS-II\Source\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uC-CPU\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-LIB\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uCOS-II\Ports\ARM\Generic\IAR\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\Atmel\AT91SAM7X\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Plugins\uCOS-II\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Demos\Intro\Source\"
#        --interwork --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\List\probe_rs232.lst
#    Object file  =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\Obj\probe_rs232.o
#
###############################################################################

E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\uC-Probe\Target\Communication\Generic\RS-232\Source\probe_rs232.c
      1          /*
      2          *********************************************************************************************************
      3          *                                       uC/Probe Communication
      4          *
      5          *                         (c) Copyright 2007-2008; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                        COMMUNICATION: RS-232
     18          *
     19          * Filename      : probe_rs232.c
     20          * Version       : V2.30
     21          * Programmer(s) : BAN
     22          *********************************************************************************************************
     23          * Note(s)       : (1) The abbreviations RX and TX refer to communication from the target's perspective.
     24          *
     25          *                 (2) The abbreviations RD and WR refer to reading data from the target memory and
     26          *                     writing data to the target memory, respectively.
     27          *********************************************************************************************************
     28          */
     29          
     30          
     31          /*
     32          *********************************************************************************************************
     33          *                                            INCLUDE FILES
     34          *********************************************************************************************************
     35          */
     36          
     37          #define    PROBE_RS232_MODULE
     38          #include  <probe_com.h>
     39          #include  <probe_rs232.h>
     40          
     41          
     42          /*
     43          *********************************************************************************************************
     44          *                                               ENABLE
     45          *
     46          * Note(s) : (1) See 'probe_rs232.h  ENABLE'.
     47          *********************************************************************************************************
     48          */
     49          
     50          #if (PROBE_COM_CFG_RS232_EN == DEF_ENABLED)                     /* See Note #1.                                         */
     51          
     52          
     53          /*
     54          *********************************************************************************************************
     55          *                                            LOCAL DEFINES
     56          *********************************************************************************************************
     57          */
     58          
     59          /*
     60          *********************************************************************************************************
     61          *                                        RS-232 PACKET FORMAT
     62          *
     63          * Note(s):  (1) All packets include the following parts:
     64          *
     65          *                   (A)  4 1-byte start delimiters, forming the ASCII representation of "uCPr".  These
     66          *                        are the constants PROBE_RS232_PROTOCOL_RX_SD0-PROBE_RS232_PROTOCOL_?X_SD4;
     67          *                   (B)  1 2-byte length, the length of the data segment;
     68          *                   (C)  1 2-byte padding, unused;
     69          *                   (D)  n   bytes of data; and
     70          *                   (E)  1 1-byte checksum; and
     71          *                   (F)  1 1-byte end delimiter, the character '/', which is the constant PROBE_RS232_PROTOCOL_?X_ED.
     72          *
     73          *                                       +-------------------+-------------------+
     74          *                                       |   'u'   |   'C'   |   'P'   |   'r'   |
     75          *                                       +-------------------+-------------------+
     76          *                                       |       Length      |     Padding       |
     77          *                                       +-------------------+-------------------+
     78          *                                       |                  Data                 |   The data segment does not need to end on
     79          *                                       |                   .                   |   a four-byte boundary, as might be inferred
     80          *                                       |                   .                   |   from this diagram.
     81          *                                       |                   .                   |
     82          *                                       +-------------------+-------------------+
     83          *                                       | Checksum|   '/'   |
     84          *                                       +-------------------+
     85          *********************************************************************************************************
     86          */
     87          
     88                                                                          /* ------------- INBOUND PACKET DELIMITERS ------------ */
     89          #define  PROBE_RS232_PROTOCOL_RX_SD0                    0x75u   /* Start delimiters.                                    */
     90          #define  PROBE_RS232_PROTOCOL_RX_SD1                    0x43u
     91          #define  PROBE_RS232_PROTOCOL_RX_SD2                    0x50u
     92          #define  PROBE_RS232_PROTOCOL_RX_SD3                    0x72u
     93          #define  PROBE_RS232_PROTOCOL_RX_ED                     0x2Fu   /* End   delimiter.                                     */
     94          
     95                                                                          /* ------------ OUTBOUND PACKET DELIMITERS ------------ */
     96          #define  PROBE_RS232_PROTOCOL_TX_SD0                    0x75u   /* Start delimiters.                                    */
     97          #define  PROBE_RS232_PROTOCOL_TX_SD1                    0x43u
     98          #define  PROBE_RS232_PROTOCOL_TX_SD2                    0x50u
     99          #define  PROBE_RS232_PROTOCOL_TX_SD3                    0x72u
    100          #define  PROBE_RS232_PROTOCOL_TX_ED                     0x2Fu   /* End   delimiter.                                     */
    101          
    102                                                                          /* ----------- RECEIVE STATE MACHINE STATES ----------- */
    103          #define  PROBE_RS232_RX_STATE_SD0                          0u   /* Waiting for start first  start delimiter (SD0).      */
    104          #define  PROBE_RS232_RX_STATE_SD1                          1u   /* Waiting for start second start delimiter (SD1).      */
    105          #define  PROBE_RS232_RX_STATE_SD2                          2u   /* Waiting for start third  start delimiter (SD2).      */
    106          #define  PROBE_RS232_RX_STATE_SD3                          3u   /* Waiting for start fourth start delimiter (SD3).      */
    107          #define  PROBE_RS232_RX_STATE_LEN1                         4u   /* Waiting for length,  first  byte.                    */
    108          #define  PROBE_RS232_RX_STATE_LEN2                         5u   /* Waiting for length,  second byte.                    */
    109          #define  PROBE_RS232_RX_STATE_PAD1                         6u   /* Waiting for padding, first  byte.                    */
    110          #define  PROBE_RS232_RX_STATE_PAD2                         7u   /* Waiting for padding, second byte.                    */
    111          #define  PROBE_RS232_RX_STATE_DATA                         8u   /* Waiting for data.                                    */
    112          #define  PROBE_RS232_RX_STATE_CHKSUM                       9u   /* Waiting for checksum.                                */
    113          #define  PROBE_RS232_RX_STATE_ED                          10u   /* Waiting for end delimiter.                           */
    114          
    115                                                                          /* ---------- TRANSMIT STATE MACHINE STATES ----------- */
    116          #define  PROBE_RS232_TX_STATE_SD0                          0u   /* Waiting to send start first  start delim. (SD0).     */
    117          #define  PROBE_RS232_TX_STATE_SD1                          1u   /* Waiting to send start second start delim. (SD1).     */
    118          #define  PROBE_RS232_TX_STATE_SD2                          2u   /* Waiting to send start third  start delim. (SD2).     */
    119          #define  PROBE_RS232_TX_STATE_SD3                          3u   /* Waiting to send start fourth start delim. (SD3).     */
    120          #define  PROBE_RS232_TX_STATE_LEN1                         4u   /* Waiting to send length,  first  byte.                */
    121          #define  PROBE_RS232_TX_STATE_LEN2                         5u   /* Waiting to send length,  second byte.                */
    122          #define  PROBE_RS232_TX_STATE_PAD1                         6u   /* Waiting to send padding, first  byte.                */
    123          #define  PROBE_RS232_TX_STATE_PAD2                         7u   /* Waiting to send padding, second byte.                */
    124          #define  PROBE_RS232_TX_STATE_DATA                         8u   /* Waiting to send data.                                */
    125          #define  PROBE_RS232_TX_STATE_CHKSUM                       9u   /* Waiting to send checksum.                            */
    126          #define  PROBE_RS232_TX_STATE_ED                          10u   /* Waiting to send end delimiter.                       */
    127          
    128          #define  PROBE_RS232_CHKSUM_EN                      DEF_FALSE    /* DO NOT CHANGE                                        */
    129          
    130          
    131          /*
    132          *********************************************************************************************************
    133          *                                           LOCAL CONSTANTS
    134          *********************************************************************************************************
    135          */
    136          
    137          
    138          /*
    139          *********************************************************************************************************
    140          *                                          LOCAL DATA TYPES
    141          *********************************************************************************************************
    142          */
    143          
    144          
    145          /*
    146          *********************************************************************************************************
    147          *                                            LOCAL TABLES
    148          *********************************************************************************************************
    149          */
    150          
    151          
    152          /*
    153          *********************************************************************************************************
    154          *                                       LOCAL GLOBAL VARIABLES
    155          *********************************************************************************************************
    156          */
    157          
    158                                                                          /* ---------------- RX STATE VARIABLES ---------------- */
    159          static  CPU_INT08U   ProbeRS232_RxState;                        /* Current state of rx state machine.                   */
    160          static  CPU_SIZE_T   ProbeRS232_RxLenRem;                       /* Rem bytes of data to rd.                             */
    161          
    162          static  CPU_SIZE_T   ProbeRS232_RxLen;                          /* Length  of data in current pkt.                      */
    163                                                                          /* Data    of current pkt.                              */
    164          static  CPU_INT08U   ProbeRS232_RxBuf[PROBE_RS232_CFG_RX_BUF_SIZE];
    165          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    166          static  CPU_INT08U   ProbeRS232_RxChkSum;                       /* Checksum of current pkt.                             */
    167          #endif
    168          
    169          static  CPU_SIZE_T   ProbeRS232_RxBufWrIx;                      /* Index of next write; also number of bytes in buf.    */
    170          
    171          
    172                                                                          /* ---------------- TX STATE VARIABLES ---------------- */
    173          static  CPU_INT08U   ProbeRS232_TxState;                        /* Current state of tx state machine.                   */
    174          static  CPU_BOOLEAN  ProbeRS232_TxActiveFlag;                   /* Indicates tx is currently active.                    */
    175          
    176          static  CPU_SIZE_T   ProbeRS232_TxLen;                          /* Length  of data in current pkt.                      */
    177                                                                          /* Data    of current pkt.                              */
    178          static  CPU_INT08U   ProbeRS232_TxBuf[PROBE_RS232_CFG_TX_BUF_SIZE];
    179          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    180          static  CPU_INT08U   ProbeRS232_TxChkSum;                       /* Checksum of current pkt.                             */
    181          #endif
    182          
    183          static  CPU_BOOLEAN  ProbeRS232_TxBufInUse;                     /* Indicates tx buf currently holds a pkt.              */
    184          static  CPU_SIZE_T   ProbeRS232_TxBufRdIx;                      /* Index of next read.                                  */
    185          
    186          
    187          
    188          /*
    189          *********************************************************************************************************
    190          *                                      LOCAL FUNCTION PROTOTYPES
    191          *********************************************************************************************************
    192          */
    193          
    194          static  CPU_SIZE_T  ProbeRS232_ParseRxPkt(void);
    195          
    196          static  void        ProbeRS232_RxPkt     (void);
    197          
    198          static  void        ProbeRS232_RxStoINT8U(CPU_INT08U  rx_data);
    199          
    200          static  void        ProbeRS232_RxBufClr  (void);
    201          
    202          static  void        ProbeRS232_TxStart   (void);
    203          
    204          
    205          /*
    206          *********************************************************************************************************
    207          *                                     LOCAL CONFIGURATION ERRORS
    208          *********************************************************************************************************
    209          */
    210          
    211          
    212          /*
    213          *********************************************************************************************************
    214          *                                          ProbeRS232_Init()
    215          *
    216          * Description : Initialize the RS-232 communication module.
    217          *
    218          * Argument(s) : baud_rate       The RS-232 baud rate which will be passed to the hardware initialization.
    219          *
    220          * Return(s)   : DEF_OK,   if initialization successful.
    221          *               DEF_FAIL, otherwise.
    222          *
    223          * Caller(s)   : Application.
    224          *
    225          * Note(s)     : none.
    226          *********************************************************************************************************
    227          */
    228          
    229          CPU_BOOLEAN  ProbeRS232_Init (CPU_INT32U baud_rate)
    230          {
    231          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    232              CPU_BOOLEAN  ok;
    233          #endif
    234          
    235          
    236              ProbeRS232_RxState             =  PROBE_RS232_RX_STATE_SD0; /* Setup rx & tx state machines.                        */
    237              ProbeRS232_TxState             =  PROBE_RS232_TX_STATE_SD0;
    238          
    239              ProbeRS232_TxLen               =  0u;
    240              ProbeRS232_TxActiveFlag        =  DEF_FALSE;
    241              ProbeRS232_TxBufInUse          =  DEF_FALSE;
    242          
    243          #if (PROBE_COM_CFG_STAT_EN         == DEF_ENABLED)
    244              ProbeRS232_RxCtr               =  0u;
    245              ProbeRS232_TxCtr               =  0u;
    246          #endif
    247          
    248          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    249              ok = ProbeRS232_OS_Init();
    250              if (ok == DEF_FAIL) {
    251                  return (DEF_FAIL);
    252              }
    253          #endif
    254          
    255              ProbeRS232_InitTarget(baud_rate);                           /* Init target-specific code.                           */
    256          
    257              return (DEF_OK);
    258          }
    259          
    260          
    261          /*
    262          *********************************************************************************************************
    263          *********************************************************************************************************
    264          *                                         INTERNAL FUNCTIONS
    265          *********************************************************************************************************
    266          *********************************************************************************************************
    267          */
    268          
    269          /*
    270          *********************************************************************************************************
    271          *                                          ProbeRS232_Task()
    272          *
    273          * Description : The task which parses the received packet, forms a response, and begins transmission.
    274          *
    275          * Argument(s) : none.
    276          *
    277          * Return(s)   : none.
    278          *
    279          * Caller(s)   : ProbeRS232_OS_Task().
    280          *
    281          * Note(s)     : none.
    282          *********************************************************************************************************
    283          */
    284          
    285          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    286          void  ProbeRS232_Task (void)
    287          {
    288              CPU_SIZE_T  len;
    289          
    290          
    291              while (DEF_TRUE) {
    292                  ProbeRS232_OS_Pend();                                   /* Wait for a packet to be received.                    */
    293          
    294                  len = ProbeRS232_ParseRxPkt();                          /* Parse packet and formulate a response.               */
    295          
    296                  if (len > 0u) {                                         /* If we have a response.                               */
    297                      ProbeRS232_TxLen = len;
    298                      ProbeRS232_TxStart();
    299                  }
    300              }
    301          }
    302          #endif
    303          
    304          
    305          /*
    306          *********************************************************************************************************
    307          *                                        ProbeRS232_RxHandler()
    308          *
    309          * Description : Handle a received byte.
    310          *
    311          * Argument(s) : rx_data     Received data byte.
    312          *
    313          * Return(s)   : none.
    314          *
    315          * Caller(s)   : Rx ISR.
    316          *
    317          * Note(s)     : none.
    318          *********************************************************************************************************
    319          */
    320          
    321          void  ProbeRS232_RxHandler (CPU_INT08U rx_data)
    322          {
    323          #if (PROBE_COM_CFG_STAT_EN == DEF_ENABLED)
    324              ProbeRS232_RxCtr++;
    325          #endif
    326          
    327              switch (ProbeRS232_RxState) {
    328                  case PROBE_RS232_RX_STATE_SD0:                          /* Rx'd the start 1st start delimiter (SD0).            */
    329                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD0) {
    330                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD1;
    331                           ProbeRS232_RxBufClr();
    332                       }
    333                       break;
    334          
    335          
    336                  case PROBE_RS232_RX_STATE_SD1:                          /* Rx'd the start 2nd start delimiter (SD1).            */
    337                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD1) {
    338                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD2;
    339                       } else {
    340                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    341                       }
    342                       break;
    343          
    344          
    345                  case PROBE_RS232_RX_STATE_SD2:                          /* Rx'd the start 3rd start delimiter (SD2).            */
    346                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD2) {
    347                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD3;
    348                       } else {
    349                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    350                       }
    351                       break;
    352          
    353          
    354                  case PROBE_RS232_RX_STATE_SD3:                          /* Rx'd the start 4th start delimiter (SD3).            */
    355                       if (rx_data == PROBE_RS232_PROTOCOL_RX_SD3) {
    356                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_LEN1;
    357                       } else {
    358                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    359                       }
    360                       break;
    361          
    362          
    363                  case PROBE_RS232_RX_STATE_LEN1:                         /* Rx'd the 1st len byte.                               */
    364          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    365                       ProbeRS232_RxChkSum = rx_data;
    366          #endif
    367                       ProbeRS232_RxLenRem = rx_data;
    368                       ProbeRS232_RxState  = PROBE_RS232_RX_STATE_LEN2;
    369                       break;
    370          
    371          
    372                  case PROBE_RS232_RX_STATE_LEN2:                         /* Rx'd the 2nd len byte.                               */
    373          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    374                       ProbeRS232_RxChkSum += rx_data;
    375          #endif
    376                       ProbeRS232_RxLenRem |= rx_data << 8;
    377          
    378                                                                          /* Chk len.                                             */
    379                       if ((ProbeRS232_RxLenRem == 0u) || (ProbeRS232_RxLenRem > PROBE_RS232_CFG_RX_BUF_SIZE)) {
    380                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    381                       } else {
    382                           ProbeRS232_RxLen   = ProbeRS232_RxLenRem;
    383                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_PAD1;
    384                       }
    385                       break;
    386          
    387          
    388                  case PROBE_RS232_RX_STATE_PAD1:                         /* Rx'd the 1st padding byte.                           */
    389                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_PAD2;
    390                       break;
    391          
    392          
    393                  case PROBE_RS232_RX_STATE_PAD2:                         /* Rx'd the 2nd  padding byte.                          */
    394                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_DATA;
    395                       break;
    396          
    397          
    398                  case PROBE_RS232_RX_STATE_DATA:                         /* Rx'd data.                                           */
    399                       ProbeRS232_RxStoINT8U(rx_data);
    400          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    401                       ProbeRS232_RxChkSum += rx_data;
    402          #endif
    403                       ProbeRS232_RxLenRem--;
    404                       if (ProbeRS232_RxLenRem == 0) {
    405                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_CHKSUM;
    406                       }
    407                       break;
    408          
    409          
    410                  case PROBE_RS232_RX_STATE_CHKSUM:                       /* Rx'd the checksum.                                   */
    411          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    412                       ProbeRS232_RxChkSum += rx_data;
    413                       if ((ProbeRS232_RxChkSum & 0xFF) == 0x00) {
    414                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
    415                       } else {
    416                           ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    417                       }
    418          #else
    419                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_ED;
    420          #endif
    421                       break;
    422          
    423          
    424                  case PROBE_RS232_RX_STATE_ED:                           /* Rx'd the end delimiter.                              */
    425                       if (rx_data == PROBE_RS232_PROTOCOL_RX_ED) {
    426                           ProbeRS232_RxPkt();                            /* Parse rx'd pkt.                                      */
    427                       }
    428                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    429                       break;
    430          
    431          
    432                  default:
    433                       ProbeRS232_RxState = PROBE_RS232_RX_STATE_SD0;
    434                       break;
    435              }
    436          }
    437          
    438          
    439          /*
    440          *********************************************************************************************************
    441          *                                       ProbeRS232_TxHandler()
    442          *
    443          * Description : Handle a byte transmission.
    444          *
    445          * Argument(s) : none.
    446          *
    447          * Return(s)   : none.
    448          *
    449          * Caller(s)   : Tx ISR.
    450          *
    451          * Note(s)     : none.
    452          *********************************************************************************************************
    453          */
    454          
    455          void  ProbeRS232_TxHandler (void)
    456          {
    457              CPU_INT08U  tx_data;
    458          
    459          
    460          #if (PROBE_COM_CFG_STAT_EN == DEF_ENABLED)
    461              if ((ProbeRS232_TxState != PROBE_RS232_TX_STATE_SD0) ||
    462                  (ProbeRS232_TxLen    > 0u                      )) {
    463                  ProbeRS232_TxCtr++;
    464              }
    465          #endif
    466          
    467              switch (ProbeRS232_TxState) {
    468                  case PROBE_RS232_TX_STATE_SD0:
    469                       if (ProbeRS232_TxLen > 0u) {                       /* If pkt is waiting to be sent ...                     */
    470                           ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD0);   /*  ... tx start 1st start delimiter (SD0).             */
    471                           ProbeRS232_TxActiveFlag = DEF_TRUE;
    472                           ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD1;
    473                           ProbeRS232_TxBufRdIx    = 0u;
    474          
    475                       } else {                                           /* If no pkt is waiting to be sent ...                  */
    476                           ProbeRS232_TxActiveFlag = DEF_FALSE;
    477                           ProbeRS232_TxIntDis();                         /*  ... dis tx int's.                                   */
    478                       }
    479                       break;
    480          
    481          
    482                  case PROBE_RS232_TX_STATE_SD1:                          /* Tx start 2nd start delimiter (SD1).                  */
    483                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD1);
    484                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD2;
    485                       break;
    486          
    487          
    488                  case PROBE_RS232_TX_STATE_SD2:                          /* Tx start 3rd start delimiter (SD2).                  */
    489                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD2);
    490                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_SD3;
    491                       break;
    492          
    493          
    494                  case PROBE_RS232_TX_STATE_SD3:                          /* Tx start 4th start delimiter (SD3).                  */
    495                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_SD3);
    496                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_LEN1;
    497                       break;
    498          
    499          
    500                  case PROBE_RS232_TX_STATE_LEN1:                         /* Tx 1st len byte.                                     */
    501                       tx_data             = ProbeRS232_TxLen & 0xFF;
    502                       ProbeRS232_Tx1(tx_data);
    503                       ProbeRS232_TxState  = PROBE_RS232_TX_STATE_LEN2;
    504          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    505                       ProbeRS232_TxChkSum = tx_data;
    506          #endif
    507                       break;
    508          
    509          
    510                  case PROBE_RS232_TX_STATE_LEN2:                         /* Tx 2nd len byte.                                     */
    511                       tx_data              = ProbeRS232_TxLen >> 8;
    512                       ProbeRS232_Tx1(tx_data);
    513                       ProbeRS232_TxState   = PROBE_RS232_TX_STATE_PAD1;
    514          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    515                       ProbeRS232_TxChkSum += tx_data;
    516          #endif
    517                       break;
    518          
    519          
    520                  case PROBE_RS232_TX_STATE_PAD1:                         /* Tx 1st padding byte.                                 */
    521                       ProbeRS232_Tx1(0);
    522                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_PAD2;
    523                       break;
    524          
    525          
    526                  case PROBE_RS232_TX_STATE_PAD2:                         /* Tx 2nd padding byte.                                 */
    527                       ProbeRS232_Tx1(0);
    528                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_DATA;
    529                       break;
    530          
    531          
    532                  case PROBE_RS232_TX_STATE_DATA:                         /* Tx data.                                             */
    533                       tx_data = ProbeRS232_TxBuf[ProbeRS232_TxBufRdIx];
    534                       ProbeRS232_Tx1(tx_data);
    535          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    536                       ProbeRS232_TxChkSum += tx_data;
    537          #endif
    538                       ProbeRS232_TxBufRdIx++;
    539                       if (ProbeRS232_TxBufRdIx >= ProbeRS232_TxLen) {
    540                           ProbeRS232_TxState = PROBE_RS232_TX_STATE_CHKSUM;
    541                           ProbeRS232_TxLen   = 0u;
    542                       }
    543                       break;
    544          
    545          
    546                  case PROBE_RS232_TX_STATE_CHKSUM:                       /* Tx checksum.                                         */
    547          #if (PROBE_RS232_CHKSUM_EN == DEF_TRUE)
    548                       ProbeRS232_Tx1(ProbeRS232_TxChkSum);
    549          #else
    550                       ProbeRS232_Tx1(0);
    551          #endif
    552                       ProbeRS232_TxState = PROBE_RS232_TX_STATE_ED;
    553                       break;
    554          
    555          
    556                  case PROBE_RS232_TX_STATE_ED:                           /* Tx end delimiter.                                    */
    557                       ProbeRS232_Tx1(PROBE_RS232_PROTOCOL_TX_ED);
    558                       ProbeRS232_TxState    = PROBE_RS232_TX_STATE_SD0;
    559                       ProbeRS232_TxBufInUse = DEF_FALSE;
    560                       break;
    561          
    562          
    563                  default:
    564                       ProbeRS232_TxState      = PROBE_RS232_TX_STATE_SD0;
    565                       ProbeRS232_TxActiveFlag = DEF_FALSE;
    566                       ProbeRS232_TxIntDis();                             /* No more data to send, dis tx int's.                  */
    567                       break;
    568              }
    569          }
    570          
    571          
    572          /*
    573          *********************************************************************************************************
    574          *********************************************************************************************************
    575          *                                           LOCAL FUNCTIONS
    576          *********************************************************************************************************
    577          *********************************************************************************************************
    578          */
    579          
    580          /*
    581          *********************************************************************************************************
    582          *                                       ProbeRS232_ParseRxPkt()
    583          *
    584          * Description : Parse a received packet & formulate a response.
    585          *
    586          * Argument(s) : none.
    587          *
    588          * Return(s)   : The number of bytes in the data segment of the packet to transmit in response.
    589          *
    590          * Caller(s)   : ProbeRS232_Task(),
    591          *               ProbeRS232_RxPkt().
    592          *
    593          * Note(s)     : none.
    594          *********************************************************************************************************
    595          */
    596          
    597          static  CPU_SIZE_T  ProbeRS232_ParseRxPkt (void)
    598          {
    599              CPU_SIZE_T  tx_len;
    600          
    601          
    602              if (ProbeRS232_TxBufInUse == DEF_TRUE) {                    /* Do cmds only if tx buf is free.                      */
    603                  return ((CPU_SIZE_T)0);
    604              }
    605          
    606              ProbeRS232_TxBufInUse = DEF_TRUE;
    607              tx_len                = ProbeCom_ParseRxPkt((void       *)ProbeRS232_RxBuf,
    608                                                          (void       *)ProbeRS232_TxBuf,
    609                                                          (CPU_SIZE_T  )ProbeRS232_RxLen,
    610                                                          (CPU_SIZE_T  )PROBE_RS232_CFG_TX_BUF_SIZE);
    611          
    612              return (tx_len);
    613          }
    614          
    615          
    616          /*
    617          *********************************************************************************************************
    618          *                                         ProbeRS232_RxPkt()
    619          *
    620          * Description : Handle a received packet.
    621          *
    622          * Argument(s) : none.
    623          *
    624          * Return(s)   : none.
    625          *
    626          * Caller(s)   : ProbeRS232_RxHandler().
    627          *
    628          * Note(s)     : none.
    629          *********************************************************************************************************
    630          */
    631          
    632          static  void  ProbeRS232_RxPkt (void)
    633          {
    634          #if (PROBE_RS232_CFG_PARSE_TASK_EN == DEF_ENABLED)
    635              ProbeRS232_OS_Post();                                       /* We have a whole pkt, signal task to parse it.        */
    636          
    637          
    638          
    639          #else
    640          
    641          
    642          
    643              CPU_SIZE_T  len;
    644              CPU_SR_ALLOC();
    645          
    646          
    647              len = ProbeRS232_ParseRxPkt();                              /* We have a whole pkt, parse it.                       */
    648              if (len > 0u) {
    649                  CPU_CRITICAL_ENTER();
    650                  ProbeRS232_TxLen = len;
    651                  ProbeRS232_TxStart();
    652                  CPU_CRITICAL_EXIT();
    653              }
    654          #endif
    655          }
    656          
    657          
    658          /*
    659          *********************************************************************************************************
    660          *                                       ProbeRS232_RxStoINT8U()
    661          *
    662          * Description : Store a byte in the receive buffer.
    663          *
    664          * Argument(s) : rx_data     Byte of data to store in the buffer.
    665          *
    666          * Return(s)   : none.
    667          *
    668          * Caller(s)   : ProbeRS232_RxHandler().
    669          *
    670          * Note(s)     : none.
    671          *********************************************************************************************************
    672          */
    673          
    674          static  void  ProbeRS232_RxStoINT8U (CPU_INT08U rx_data)
    675          {
    676              if (ProbeRS232_RxBufWrIx < PROBE_RS232_CFG_RX_BUF_SIZE) {
    677                  ProbeRS232_RxBuf[ProbeRS232_RxBufWrIx++] = rx_data;
    678              }
    679          }
    680          
    681          
    682          /*
    683          *********************************************************************************************************
    684          *                                        ProbeRS232_RxBufClr()
    685          *
    686          * Description : Clear the data segment buffer write index.
    687          *
    688          * Argument(s) : none.
    689          *
    690          * Return(s)   : none.
    691          *
    692          * Caller(s)   : ProbeRS232_RxHandler().
    693          *
    694          * Note(s)     : none.
    695          *********************************************************************************************************
    696          */
    697          
    698          static  void  ProbeRS232_RxBufClr (void)
    699          {
    700              ProbeRS232_RxBufWrIx = 0u;
    701          }
    702          
    703          
    704          /*
    705          *********************************************************************************************************
    706          *                                        ProbeRS232_TxStart()
    707          *
    708          * Description : Cause transmission to begin.
    709          *
    710          * Argument(s) : none.
    711          *
    712          * Return(s)   : none.
    713          *
    714          * Caller(s)   : ProbeRS232_Task(),
    715          *               ProbeRS232_RxPkt().
    716          *
    717          * Note(s)     : none.
    718          *********************************************************************************************************
    719          */
    720          
    721          static  void  ProbeRS232_TxStart (void)
    722          {
    723              if (ProbeRS232_TxActiveFlag == DEF_FALSE) {                 /* If no other tx is in progress ...                    */
    724                  ProbeRS232_TxHandler();                                 /*  ... handle tx                ...                    */
    725                  ProbeRS232_TxIntEn();                                   /*  ... en     tx ints.                                 */
    726              }
    727          }
    728          
    729          
    730          /*
    731          *********************************************************************************************************
    732          *                                              ENABLE END
    733          *
    734          * Note(s) : See 'ENABLE  Note #1'.
    735          *********************************************************************************************************
    736          */
    737          
    738          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ProbeRS232_Init
        16   -> ProbeRS232_InitTarget
        16   -> ProbeRS232_OS_Init
       8   ProbeRS232_ParseRxPkt
         8   -> ProbeCom_ParseRxPkt
       0   ProbeRS232_RxBufClr
       8   ProbeRS232_RxHandler
         8   -> ProbeRS232_RxBufClr
         8   -> ProbeRS232_RxPkt
         8   -> ProbeRS232_RxStoINT8U
       8   ProbeRS232_RxPkt
         8   -> ProbeRS232_OS_Post
       0   ProbeRS232_RxStoINT8U
       8   ProbeRS232_Task
         8   -> ProbeRS232_OS_Pend
         8   -> ProbeRS232_ParseRxPkt
         8   -> ProbeRS232_TxStart
       8   ProbeRS232_TxHandler
         8   -> ProbeRS232_Tx1
         8   -> ProbeRS232_TxIntDis
       8   ProbeRS232_TxStart
         8   -> ProbeRS232_TxHandler
         8   -> ProbeRS232_TxIntEn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     144  ProbeRS232_Init
      80  ProbeRS232_ParseRxPkt
     512  ProbeRS232_RxBuf
      16  ProbeRS232_RxBufClr
       4  ProbeRS232_RxBufWrIx
       4  ProbeRS232_RxCtr
     560  ProbeRS232_RxHandler
       4  ProbeRS232_RxLen
       4  ProbeRS232_RxLenRem
      16  ProbeRS232_RxPkt
       1  ProbeRS232_RxState
      56  ProbeRS232_RxStoINT8U
      40  ProbeRS232_Task
       1  ProbeRS232_TxActiveFlag
     512  ProbeRS232_TxBuf
       1  ProbeRS232_TxBufInUse
       4  ProbeRS232_TxBufRdIx
       4  ProbeRS232_TxCtr
     576  ProbeRS232_TxHandler
       4  ProbeRS232_TxLen
      36  ProbeRS232_TxStart
       1  ProbeRS232_TxState

 
 1 056 bytes in section .bss
 1 576 bytes in section .text
 
 1 576 bytes of CODE memory
 1 056 bytes of DATA memory

Errors: none
Warnings: none
