###############################################################################
#                                                                             #
#     IAR Assembler V7.10.3.6832/W32 for ARM 04/Sep/2014  10:10:15            #
#     Copyright 1999-2014 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\uC-CPU\ARM\IAR\cpu_a.s#
#           List file     =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\cpu_a.lst#
#           Object file   =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\cpu_a.o#
#           Command line  =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\uC-CPU\ARM\IAR\cpu_a.s #
#                            -OE:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LE:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\ #
#                            -t8 --cpu ARM7TDMI --fpu None                    #
#                                                                             #
###############################################################################

    1                           ;*********************************************
                                ***********************************************
                                ************
    2                           ;                                             
                                  uC/CPU
    3                           ;                                    CPU
                                 CONFIGURATION & PORT LAYER
    4                           ;
    5                           ;                          (c) Copyright
                                 2004-2009; Micrium, Inc.; Weston, FL
    6                           ;
    7                           ;               All rights reserved. 
                                 Protected by international copyright
                                 laws.
    8                           ;
    9                           ;               uC/CPU is provided in source
                                 form for FREE evaluation, for educational
   10                           ;               use or peaceful research.  If
                                 you plan on using uC/CPU in a commercial
   11                           ;               product you need to contact
                                 Micrium to properly license its use in
                                 your
   12                           ;               product.  We provide ALL the
                                 source code for your convenience and
                                 to
   13                           ;               help you experience uC/CPU. 
                                 The fact that the source code is provided
   14                           ;               does NOT mean that you can use
                                 it without paying a licensing fee.
   15                           ;
   16                           ;               Knowledge of the source code
                                 may NOT be used to develop a similar
                                 product.
   17                           ;
   18                           ;               Please help us continue to
                                 provide the Embedded community with the
                                 finest
   19                           ;               software available.  Your
                                 honesty is greatly appreciated.
   20                           ;*********************************************
                                ***********************************************
                                ************
   21                           
   22                           ;*********************************************
                                ***********************************************
                                ************
   23                           ;
   24                           ;                                           
                                 CPU PORT FILE
   25                           ;
   26                           ;                                             
                                    ARM
   27                           ;                                           
                                 IAR C Compiler
   28                           ;
   29                           ; Filename      : cpu_a.s
   30                           ; Version       : V1.23
   31                           ; Programmer(s) : JJL
   32                           ;                 JDH
   33                           ;                 BAN
   34                           ;                 ITJ
   35                           ;*********************************************
                                ***********************************************
                                ************
   36                           
   37                           
   38                           ;*********************************************
                                ***********************************************
                                ************
   39                           ;                                          
                                 PUBLIC FUNCTIONS
   40                           ;*********************************************
                                ***********************************************
                                ************
   41                           
   42                               PUBLIC  CPU_SR_Save
   43                               PUBLIC  CPU_SR_Restore
   44                           
   45                               PUBLIC  CPU_IntDis
   46                               PUBLIC  CPU_IntEn
   47                           
   48                               PUBLIC  CPU_IRQ_Dis
   49                               PUBLIC  CPU_IRQ_En
   50                           
   51                               PUBLIC  CPU_FIQ_Dis
   52                               PUBLIC  CPU_FIQ_En
   53                           
   54                           
   55                           ;*********************************************
                                ***********************************************
                                ************
   56                           ;                                             
                                   EQUATES
   57                           ;*********************************************
                                ***********************************************
                                ************
   58                           
   59                           CPU_ARM_CTRL_INT_DIS  EQU       0xC0          
                                                  ; Disable both FIQ &
                                 IRQ
   60                           CPU_ARM_CTRL_FIQ_DIS  EQU       0x40          
                                                  ; Disable FIQ.
   61                           CPU_ARM_CTRL_IRQ_DIS  EQU       0x80          
                                                  ; Disable IRQ.
   62                           
   63                           
   64                           ;*********************************************
                                ***********************************************
                                ************
   65                           ;                                      CODE
                                 GENERATION DIRECTIVES
   66                           ;*********************************************
                                ***********************************************
                                ************
   67                           
   68                               RSEG CODE:CODE:NOROOT(2)
   69                               CODE32
   70                           
   71                           
   72                           ;$PAGE
   73                           ;*********************************************
                                ***********************************************
                                ************
   74                           ;                                     
                                 CRITICAL SECTION FUNCTIONS
   75                           ;
   76                           ; Description : Disable/Enable interrupts by
                                 preserving the state of interrupts.  Generally
                                 speaking, the
   77                           ;               state of the interrupt disable
                                 flag is stored in the local variable 'cpu_sr'
                                 & interrupts
   78                           ;               are then disabled ('cpu_sr' is
                                 allocated in all functions that need to
                                 disable interrupts).
   79                           ;               The previous interrupt state
                                 is restored by copying 'cpu_sr' into the CPU's
                                 status register.
   80                           ;
   81                           ; Prototypes  : CPU_SR  CPU_SR_Save  
                                 (void);
   82                           ;               void    CPU_SR_Restore(CPU_SR 
                                 cpu_sr);
   83                           ;
   84                           ; Note(s)     : (1) These functions are used
                                 in general like this :
   85                           ;
   86                           ;                       void  Task (void 
                                 *p_arg)
   87                           ;                       {
   88                           ;                           CPU_SR_ALLOC();   
                                                  /* Allocate storage for CPU
                                 status register */
   89                           ;                               :
   90                           ;                               :
   91                           ;                           CPU_CRITICAL_ENTER
                                ();               /* cpu_sr = CPU_SR_Save();   
                                               */
   92                           ;                               :
   93                           ;                               :
   94                           ;                           CPU_CRITICAL_EXIT(
                                );                /* CPU_SR_Restore(cpu_sr);   
                                               */
   95                           ;                               :
   96                           ;                       }
   97                           ;
   98                           ;               (2) CPU_SR_Restore() is
                                 implemented as recommended by Atmel's
                                 application note :
   99                           ;
  100                           ;                       "Disabling Interrupts
                                 at Processor Level"
  101                           ;*********************************************
                                ***********************************************
                                ************
  102                           
  103                           CPU_SR_Save
  104    00000000 00000FE1              MRS     R0, CPSR
  105                           
  106                           CPU_SR_Save_Loop
  107                                                                         
                                                  ; Set IRQ & FIQ bits in CPSR
                                 to DISABLE all interrupts
  108    00000004 C01080E3              ORR     R1, R0, #CPU_ARM_CTRL_INT_DIS
  109    00000008 01F021E1              MSR     CPSR_c, R1
  110    0000000C 00100FE1              MRS     R1, CPSR                       
                                                                 ; Confirm that
                                                 CPSR contains the proper
                                                 interrupt disable flags
  111    00000010 C01001E2              AND     R1, R1, #CPU_ARM_CTRL_INT_DIS
  112    00000014 C00051E3              CMP     R1,     #CPU_ARM_CTRL_INT_DIS
  113    00000018 F9FFFF1A              BNE     CPU_SR_Save_Loop               
                                                                  ; NOT
                                                  properly DISABLED (try
                                                  again)
  114    0000001C 1EFF2FE1              BX      LR                             
                                                                 ; DISABLED,
                                                 return the original CPSR
                                                 contents in R0
  115                           
  116                           
  117                           CPU_SR_Restore                                
                                                  ; See Note #2
  118    00000020 00F021E1              MSR     CPSR_c, R0
  119    00000024 1EFF2FE1              BX      LR
  120                           
  121                           
  122                           ;$PAGE
  123                           ;*********************************************
                                ***********************************************
                                ************
  124                           ;                                     ENABLE &
                                 DISABLE INTERRUPTS
  125                           ;
  126                           ; Description : Disable/Enable IRQs &
                                 FIQs.
  127                           ;
  128                           ; Prototypes  : void  CPU_IntEn (void);
  129                           ;               void  CPU_IntDis(void);
  130                           ;*********************************************
                                ***********************************************
                                ************
  131                           
  132                           CPU_IntDis
  133    00000028 00000FE1              MRS     R0, CPSR
  134    0000002C C00080E3              ORR     R0, R0, #CPU_ARM_CTRL_INT_DIS  
                                                                 ; Set IRQ and
                                                 FIQ bits in CPSR to disable
                                                 all interrupts.
  135    00000030 00F021E1              MSR     CPSR_c, R0
  136    00000034 1EFF2FE1              BX      LR
  137                           
  138                           CPU_IntEn
  139    00000038 00000FE1              MRS     R0, CPSR
  140    0000003C C000C0E3              BIC     R0, R0, #CPU_ARM_CTRL_INT_DIS  
                                                                 ; Clear IRQ
                                                 and FIQ bits in CPSR to enable
                                                 all interrupts.
  141    00000040 00F021E1              MSR     CPSR_c, R0
  142    00000044 1EFF2FE1              BX      LR
  143                           
  144                           
  145                           ;*********************************************
                                ***********************************************
                                ************
  146                           ;                                       
                                 ENABLE & DISABLE IRQs
  147                           ;
  148                           ; Description : Disable/Enable IRQs.
  149                           ;
  150                           ; Prototypes  : void  CPU_IRQ_En (void);
  151                           ;               void  CPU_IRQ_Dis(void);
  152                           ;*********************************************
                                ***********************************************
                                ************
  153                           
  154                           CPU_IRQ_Dis
  155    00000048 00000FE1              MRS     R0, CPSR
  156    0000004C 800080E3              ORR     R0, R0, #CPU_ARM_CTRL_IRQ_DIS  
                                                                 ; Set IRQ bit
                                                 in CPSR to disable IRQs.
  157    00000050 00F021E1              MSR     CPSR_c, R0
  158    00000054 1EFF2FE1              BX      LR
  159                           
  160                           
  161                           CPU_IRQ_En
  162    00000058 00000FE1              MRS     R0, CPSR
  163    0000005C 8000C0E3              BIC     R0, R0, #CPU_ARM_CTRL_IRQ_DIS  
                                                                 ; Clear IRQ
                                                 bit in CPSR to enable
                                                 IRQs.
  164    00000060 00F021E1              MSR     CPSR_c, R0
  165    00000064 1EFF2FE1              BX      LR
  166                           
  167                           
  168                           ;*********************************************
                                ***********************************************
                                ************
  169                           ;                                       
                                 ENABLE & DISABLE FIQs
  170                           ;
  171                           ; Description : Disable/Enable FIQs.
  172                           ;
  173                           ; Prototypes  : void  CPU_FIQ_En (void);
  174                           ;               void  CPU_FIQ_Dis(void);
  175                           ;*********************************************
                                ***********************************************
                                ************
  176                           
  177                           CPU_FIQ_Dis
  178    00000068 00000FE1              MRS     R0, CPSR
  179    0000006C 400080E3              ORR     R0, R0, #CPU_ARM_CTRL_FIQ_DIS  
                                                                 ; Set FIQ bit
                                                 in CPSR to disable FIQs.
  180    00000070 00F021E1              MSR     CPSR_c, R0
  181    00000074 1EFF2FE1              BX      LR
  182                           
  183                           CPU_FIQ_En
  184    00000078 00000FE1              MRS     R0, CPSR
  185    0000007C 4000C0E3              BIC     R0, R0, #CPU_ARM_CTRL_FIQ_DIS  
                                                                 ; Clear FIQ
                                                 bit in CPSR to enable
                                                 FIQs.
  186    00000080 00F021E1              MSR     CPSR_c, R0
  187    00000084 1EFF2FE1              BX      LR
  188                           
  189                           
  190                           ;$PAGE
  191                           ;*********************************************
                                ***********************************************
                                ************
  192                           ;                                     CPU
                                 ASSEMBLY PORT FILE END
  193                           ;*********************************************
                                ***********************************************
                                ************
  194                           
  195                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 136         #
##############################



