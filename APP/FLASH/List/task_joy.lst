###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        16/Dec/2014  22:25:31
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_joy.c
#    Command line =  
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_joy.c" -lcN
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -lb
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -o
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM7TDMI -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\BSP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Driver\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Noah\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Shell\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uCOS-II\Source\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uC-CPU\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-LIB\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uCOS-II\Ports\ARM\Generic\IAR\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\Atmel\AT91SAM7X\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Plugins\uCOS-II\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Demos\Intro\Source\"
#        --interwork --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\List\task_joy.lst
#    Object file  =  
#        E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\task_joy.o
#
###############################################################################

E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_joy.c
      1          /*
      2          *********************************************************************************************************
      3          *                               iSAM TEST BENCH AUDIO BRIDGE BOARD APP PACKAGE
      4          *
      5          *                            (c) Copyright 2013 - 2016; Fortemedia Inc.; Nanjing, China
      6          *
      7          *                   All rights reserved.  Protected by international copyright laws.
      8          *                   Knowledge of the source code may not be used to write a similar
      9          *                   product.  This file may only be used in accordance with a license
     10          *                   and should not be redistributed in any way.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                           TASK PACKAGE
     18          *
     19          *                                          Atmel AT91SAM7A3
     20          *                                               on the
     21          *                                      iSAM Audio Bridge Board
     22          *
     23          * Filename      : task_joy.c
     24          * Version       : V1.0.0
     25          * Programmer(s) : PQ
     26          *********************************************************************************************************
     27          * Note(s)       :
     28          *********************************************************************************************************
     29          */
     30          
     31          #include <includes.h>
     32          
     33          
     34          
     35          
     36          /*
     37          *********************************************************************************************************
     38          *                                    App_TaskJoy()
     39          *
     40          * Description : Monitor the state change of the reset button, switches and ruler port connection. And 
     41          *               passes messages to 'App_TaskUserIF()' if state change happened.
     42          *
     43          * Argument(s) : p_arg       Argument passed to 'App_TaskKbd()' by 'OSTaskCreate()'.
     44          *
     45          * Return(s)   : none.
     46          *
     47          * Note(s)     : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
     48          *                   used.  The compiler should not generate any code for this statement.
     49          *               (2) Here suppose App_TaskJoy's priority is bellow App_TaskUserIF().
     50          *                   So we can use one memory to pass message.
     51          * 
     52          *********************************************************************************************************
     53          */
     54          void  App_TaskJoy (void *p_arg)
     55          {  
     56              (void)p_arg;
     57              
     58              CPU_INT32U   switch_value;
     59              CPU_INT32U   switch_value_prev;
     60              CPU_INT32U   ruler_port_value;
     61              CPU_INT32U   ruler_port_value_prev;    
     62              CPU_INT32U   data ;
     63              CPU_INT32U   i ;
     64              
     65              switch_value_prev      =  Get_Switches()    & 0x0F; //avoid a fake trigger after POR
     66              ruler_port_value_prev  =  Get_Port_Detect() & 0x0F;
     67              
     68              //flash_test(); //debug use
     69              
     70              while ( DEF_TRUE ) {     /* Task body, always written as an infinite loop.           */   
     71                  
     72                  if( Flag_Reset_Pin_Trigger != 0 ){ //check reset flag          
     73                      Flag_Reset_Pin_Trigger-- ;
     74                      
     75                      for(i = 0; i<100 ; i++) { //check if a 1000ms low level on reset pin                  
     76                          if( (AT91C_BASE_RSTC->RSTC_RSR & AT91C_RSTC_NRSTL) != 0) {
     77                              break;
     78                          }
     79                          OSTimeDly(10);                
     80                      } 
     81                      
     82                      if(i >= 100 ) {// trigger reset             
     83                          APP_TRACE_INFO((">>User reset pin triggered... \r\n" ));
     84                          APP_TRACE_INFO((">>That's all folks !\r\n\r\n>> Rebooting...\r\n"));                             
     85                          Beep(3); 
     86                          //PDM_Pattern_Gen(1); //Generate idle PDM data for CP2240 
     87                          Pin_Reset_Audio_MCU(); //reset audio
     88                          AT91C_BASE_RSTC->RSTC_RCR = MCU_SW_RESET_PATTERN ; // do reset processor and peripherals
     89                          while(1);
     90                        
     91                      } else { // not reset               
     92                          data = MSG_TYPE_RESET ; //means print inf
     93                          while( OSMboxPost(App_UserIF_Mbox, &data) == OS_ERR_MBOX_FULL ) {
     94                              OSTimeDly(10);  //
     95                          }
     96                      }       
     97                      
     98                  }
     99                     
    100                  switch_value = Get_Switches() & 0x0F; //mask  
    101                  if( switch_value != switch_value_prev ) {  
    102                      OSTimeDly(100);
    103                      if( switch_value == Get_Switches() & 0x0F ) { //jitter immune                         
    104                          data = switch_value ^ switch_value_prev ;   
    105                          switch_value_prev = switch_value ;
    106                          data = ( data << 8 ) | (switch_value & 0xFF) ;
    107                          data &= ~MSG_TYPE_MASK ;
    108                          data |= MSG_TYPE_SWITCH; 
    109                          while ( OSMboxPost(App_UserIF_Mbox, &data) == OS_ERR_MBOX_FULL ) {
    110                              OSTimeDly(10);  //
    111                          };            
    112                          
    113                      }
    114                  }
    115                  
    116                  ruler_port_value = Get_Port_Detect() & 0x0F; //mask  
    117                  if( ruler_port_value != ruler_port_value_prev ) {
    118                      OSTimeDly(100); 
    119                      if( ruler_port_value == Get_Port_Detect() & 0x0F ) {  //jitter immune
    120                          data = ruler_port_value ^ ruler_port_value_prev ;   
    121                          ruler_port_value_prev = ruler_port_value ;
    122                          data = ( data << 8 ) | (ruler_port_value & 0xFF) ; 
    123                          data &= ~MSG_TYPE_MASK ;
    124                          data |= MSG_TYPE_PORT_DET;                 
    125                          while ( OSMboxPost(App_UserIF_Mbox, &data) == OS_ERR_MBOX_FULL ) {
    126                              OSTimeDly(10);  //
    127                          };          
    128                          
    129                      }
    130                  }
    131             
    132                  AB_Status_Change_Report();
    133                  
    134                  OSTimeDly(100); 
    135                 
    136              }
    137                
    138              
    139          }
    140              

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   App_TaskJoy
        32   -> AB_Status_Change_Report
        32   -> BSP_Ser_Printf
        32   -> Beep
        32   -> Get_Port_Detect
        32   -> Get_Switches
        32   -> OSMboxPost
        32   -> OSTimeDly
        32   -> Pin_Reset_Audio_MCU


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  ?<Constant ">>That\'s all folks !\r...">
      36  ?<Constant ">>User reset pin trig...">
     568  App_TaskJoy

 
  80 bytes in section .rodata
 568 bytes in section .text
 
 568 bytes of CODE  memory
  80 bytes of CONST memory

Errors: none
Warnings: none
