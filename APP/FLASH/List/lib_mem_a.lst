###############################################################################
#                                                                             #
#     IAR Assembler V7.10.3.6832/W32 for ARM 04/Sep/2014  10:10:18            #
#     Copyright 1999-2014 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\uC-LIB\Ports\ARM\IAR\lib_mem_a.asm#
#           List file     =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\lib_mem_a.lst#
#           Object file   =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\lib_mem_a.o#
#           Command line  =  E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\uC-LIB\Ports\ARM\IAR\lib_mem_a.asm #
#                            -OE:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LE:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\ #
#                            -t8 --cpu ARM7TDMI --fpu None                    #
#                                                                             #
###############################################################################

    1                           ;*********************************************
                                ***********************************************
                                ************
    2                           ;                                             
                                  uC/LIB
    3                           ;                                       CUSTOM
                                 LIBRARY MODULES
    4                           ;
    5                           ;                          (c) Copyright
                                 2004-2009; Micrium, Inc.; Weston, FL
    6                           ;
    7                           ;               All rights reserved. 
                                 Protected by international copyright
                                 laws.
    8                           ;
    9                           ;               uC/LIB is provided in source
                                 form for FREE evaluation, for educational
   10                           ;               use or peaceful research.  If
                                 you plan on using uC/LIB in a commercial
   11                           ;               product you need to contact
                                 Micrium to properly license its use in
                                 your
   12                           ;               product.  We provide ALL the
                                 source code for your convenience and
                                 to
   13                           ;               help you experience uC/LIB. 
                                 The fact that the source code is provided
   14                           ;               does NOT mean that you can use
                                 it without paying a licensing fee.
   15                           ;
   16                           ;               Knowledge of the source code
                                 may NOT be used to develop a similar
                                 product.
   17                           ;
   18                           ;               Please help us continue to
                                 provide the Embedded community with the
                                 finest
   19                           ;               software available.  Your
                                 honesty is greatly appreciated.
   20                           ;*********************************************
                                ***********************************************
                                ************
   21                           
   22                           
   23                           ;*********************************************
                                ***********************************************
                                ************
   24                           ;
   25                           ;                                     STANDARD
                                 MEMORY OPERATIONS
   26                           ;
   27                           ;                                             
                                  ARM
   28                           ;                                          
                                 IAR Compiler
   29                           ;
   30                           ; Filename      : lib_mem_a.asm
   31                           ; Version       : V1.30
   32                           ; Programmer(s) : JDH
   33                           ;*********************************************
                                ***********************************************
                                ************
   34                           ; Note(s)       : (1) NO compiler-supplied
                                 standard library functions are used in library
                                 or product software.
   35                           ;
   36                           ;                     (a) ALL standard library
                                 functions are implemented in the custom
                                 library modules :
   37                           ;
   38                           ;                         (1) \<Custom Library
                                 Directory>\lib*.*
   39                           ;
   40                           ;                         (2) \<Custom Library
                                 Directory>\Ports\<cpu>\<compiler>\lib*_a.*
   41                           ;
   42                           ;                               where
   43                           ;                                      
                                 <Custom Library Directory>      directory path
                                 for custom library software
   44                           ;                                       <cpu> 
                                                          directory name for
                                 specific processor (CPU)
   45                           ;                                      
                                 <compiler>                      directory name
                                 for specific compiler
   46                           ;
   47                           ;                     (b) Product-specific
                                 library functions are implemented in
                                 individual products.
   48                           ;
   49                           ;                 (2) Assumes ARM CPU mode
                                 configured for Little Endian.
   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           
   52                           
   53                           ;*********************************************
                                ***********************************************
                                ************
   54                           ;                                          
                                 PUBLIC FUNCTIONS
   55                           ;*********************************************
                                ***********************************************
                                ************
   56                           
   57                                   PUBLIC  Mem_Copy
   58                           
   59                           
   60                           ;*********************************************
                                ***********************************************
                                ************
   61                           ;                                      CODE
                                 GENERATION DIRECTIVES
   62                           ;*********************************************
                                ***********************************************
                                ************
   63                           
   64                                   RSEG CODE:CODE:NOROOT(2)
   65                                   CODE32
   66                           
   67                           
   68                           ;$PAGE
   69                           ;*********************************************
                                ***********************************************
                                ************
   70                           ;                                            
                                 Mem_Copy()
   71                           ;
   72                           ; Description : Copy data octets from one
                                 buffer to another buffer.
   73                           ;
   74                           ; Argument(s) : pdest       Pointer to
                                 destination memory buffer.
   75                           ;
   76                           ;               psrc        Pointer to source 
                                     memory buffer.
   77                           ;
   78                           ;               size        Number of data
                                 buffer octets to copy.
   79                           ;
   80                           ; Return(s)   : none.
   81                           ;
   82                           ; Caller(s)   : Application.
   83                           ;
   84                           ; Note(s)     : (1) Null copies allowed (i.e.
                                 0-octet size).
   85                           ;
   86                           ;               (2) Memory buffers NOT checked
                                 for overlapping.
   87                           ;
   88                           ;               (3) Modulo arithmetic is used
                                 to determine whether a memory buffer starts on
                                 a 'CPU_ALIGN'
   89                           ;                   address boundary.
   90                           ;*********************************************
                                ***********************************************
                                ************
   91                           
   92                           ; void  Mem_Copy (void        *pdest,       ; 
                                 ==>  R0
   93                           ;                 void        *psrc,        ; 
                                 ==>  R1
   94                           ;                 CPU_SIZE_T   size)        ; 
                                 ==>  R2
   95                           
   96                           Mem_Copy:
   97    00000000 000050E3              CMP         R0, #0
   98    00000004 0000001A              BNE         Mem_Copy_1
   99    00000008 1EFF2FE1              BX          LR                      ;
                                                     return if pdest ==
                                                     NULL
  100                           
  101                           Mem_Copy_1:
  102    0000000C 000051E3              CMP         R1, #0
  103    00000010 0000001A              BNE         Mem_Copy_2
  104    00000014 1EFF2FE1              BX          LR                      ;
                                                     return if psrc  ==
                                                     NULL
  105                           
  106                           Mem_Copy_2:
  107    00000018 000052E3              CMP         R2, #0
  108    0000001C 0000001A              BNE         Mem_Copy_3
  109    00000020 1EFF2FE1              BX          LR                      ;
                                                     return if size  ==
                                                     0
  110                           
  111                           Mem_Copy_3:
  112    00000024 F81F2DE9              STMFD       SP!, {R3-R12}           ;
                                                     save registers on
                                                     stack
  113                           
  114                           
  115                           ;$PAGE
  116                           Chk_Align_32:                               ;
                                 check if both dest & src 32-bit aligned
  117    00000028 033000E2              AND         R3, R0, #0x03
  118    0000002C 034001E2              AND         R4, R1, #0x03
  119    00000030 040053E1              CMP         R3, R4
  120    00000034 0A00001A              BNE         Chk_Align_16            ;
                                                      not 32-bit aligned, check
                                                      for 16-bit alignment
  121                           
  122    00000038 043063E2              RSB         R3, R3, #0x04           ;
                                                     compute 1-2-3 pre-copy
                                                     bytes (to align to the
                                                     next 32-bit boundary)
  123    0000003C 033003E2              AND         R3, R3, #0x03
  124                           
  125                           Pre_Copy_1:
  126    00000040 010053E3              CMP         R3, #1                  ;
                                                     copy 1-2-3 bytes (to align
                                                     to the next 32-bit
                                                     boundary)
  127    00000044 1100003A              BCC         Copy_32_1               ;
                                                      start real 32-bit
                                                      copy
  128    00000048 010052E3              CMP         R2, #1                  ;
                                                     check if any more data to
                                                     copy
  129    0000004C 8500003A              BCC         Mem_Copy_END            ;  
                                                              no more data to
                                                      copy
  130                           
  131    00000050 0140D1E4              LDRB        R4, [R1], #1
  132    00000054 0140C0E4              STRB        R4, [R0], #1
  133    00000058 013043E2              SUB         R3, R3, #1
  134    0000005C 012042E2              SUB         R2, R2, #1
  135    00000060 F6FFFFEA              B           Pre_Copy_1
  136                           
  137                           
  138                           Chk_Align_16:                               ;
                                 check if both dest & src 16-bit aligned
  139    00000064 013000E2              AND         R3, R0, #0x01
  140    00000068 014001E2              AND         R4, R1, #0x01
  141    0000006C 040053E1              CMP         R3, R4
  142    00000070 5200001A              BNE         Copy_08_1               ;
                                                      not 16-bit aligned, start
                                                      8-bit copy
  143                           
  144                           Pre_Copy_2:
  145    00000074 010053E3              CMP         R3, #1                  ;
                                                     copy 1 byte (to align to
                                                     the next 16-bit boundary)
  146    00000078 2600003A              BCC         Copy_16_1               ;
                                                      start real 16-bit
                                                      copy
  147                           
  148    0000007C 0140D1E4              LDRB        R4, [R1], #1
  149    00000080 0140C0E4              STRB        R4, [R0], #1
  150    00000084 013043E2              SUB         R3, R3, #1
  151    00000088 012042E2              SUB         R2, R2, #1
  152    0000008C F8FFFFEA              B           Pre_Copy_2
  153                           
  154                           
  155                           Copy_32_1:
  156    00000090 5A0F52E3              CMP         R2, #(04*10*09)         ;
                                                     Copy 9 chunks of 10 32-bit
                                                     words (360 octets per
                                                     loop)
  157    00000094 1300003A              BCC         Copy_32_2
  158    00000098 F81FB1E8              LDMIA       R1!, {R3-R12}
  159    0000009C F81FA0E8              STMIA       R0!, {R3-R12}
  160    000000A0 F81FB1E8              LDMIA       R1!, {R3-R12}
  161    000000A4 F81FA0E8              STMIA       R0!, {R3-R12}
  162    000000A8 F81FB1E8              LDMIA       R1!, {R3-R12}
  163    000000AC F81FA0E8              STMIA       R0!, {R3-R12}
  164    000000B0 F81FB1E8              LDMIA       R1!, {R3-R12}
  165    000000B4 F81FA0E8              STMIA       R0!, {R3-R12}
  166    000000B8 F81FB1E8              LDMIA       R1!, {R3-R12}
  167    000000BC F81FA0E8              STMIA       R0!, {R3-R12}
  168    000000C0 F81FB1E8              LDMIA       R1!, {R3-R12}
  169    000000C4 F81FA0E8              STMIA       R0!, {R3-R12}
  170    000000C8 F81FB1E8              LDMIA       R1!, {R3-R12}
  171    000000CC F81FA0E8              STMIA       R0!, {R3-R12}
  172    000000D0 F81FB1E8              LDMIA       R1!, {R3-R12}
  173    000000D4 F81FA0E8              STMIA       R0!, {R3-R12}
  174    000000D8 F81FB1E8              LDMIA       R1!, {R3-R12}
  175    000000DC F81FA0E8              STMIA       R0!, {R3-R12}
  176    000000E0 5A2F42E2              SUB         R2, R2, #(04*10*09)
  177    000000E4 E9FFFFEA              B           Copy_32_1
  178                           
  179                           Copy_32_2:
  180    000000E8 280052E3              CMP         R2, #(04*10*01)         ;
                                                     Copy chunks of 10 32-bit
                                                     words (40 octets per
                                                     loop)
  181    000000EC 0300003A              BCC         Copy_32_3
  182    000000F0 F81FB1E8              LDMIA       R1!, {R3-R12}
  183    000000F4 F81FA0E8              STMIA       R0!, {R3-R12}
  184    000000F8 282042E2              SUB         R2, R2, #(04*10*01)
  185    000000FC F9FFFFEA              B           Copy_32_2
  186                           
  187                           Copy_32_3:
  188    00000100 040052E3              CMP         R2, #(04*01*01)         ;
                                                     Copy remaining 32-bit
                                                     words
  189    00000104 0300003A              BCC         Copy_16_1
  190    00000108 043091E4              LDR         R3, [R1], #4
  191    0000010C 043080E4              STR         R3, [R0], #4
  192    00000110 042042E2              SUB         R2, R2, #(04*01*01)
  193    00000114 F9FFFFEA              B           Copy_32_3
  194                           
  195                           ;$PAGE
  196                           Copy_16_1:
  197    00000118 200052E3              CMP         R2, #(02*01*16)         ;
                                                     Copy chunks of 16 16-bit
                                                     words (32 bytes per
                                                     loop)
  198    0000011C 2100003A              BCC         Copy_16_2
  199    00000120 B230D1E0              LDRH        R3, [R1], #2
  200    00000124 B230C0E0              STRH        R3, [R0], #2
  201    00000128 B230D1E0              LDRH        R3, [R1], #2
  202    0000012C B230C0E0              STRH        R3, [R0], #2
  203    00000130 B230D1E0              LDRH        R3, [R1], #2
  204    00000134 B230C0E0              STRH        R3, [R0], #2
  205    00000138 B230D1E0              LDRH        R3, [R1], #2
  206    0000013C B230C0E0              STRH        R3, [R0], #2
  207    00000140 B230D1E0              LDRH        R3, [R1], #2
  208    00000144 B230C0E0              STRH        R3, [R0], #2
  209    00000148 B230D1E0              LDRH        R3, [R1], #2
  210    0000014C B230C0E0              STRH        R3, [R0], #2
  211    00000150 B230D1E0              LDRH        R3, [R1], #2
  212    00000154 B230C0E0              STRH        R3, [R0], #2
  213    00000158 B230D1E0              LDRH        R3, [R1], #2
  214    0000015C B230C0E0              STRH        R3, [R0], #2
  215    00000160 B230D1E0              LDRH        R3, [R1], #2
  216    00000164 B230C0E0              STRH        R3, [R0], #2
  217    00000168 B230D1E0              LDRH        R3, [R1], #2
  218    0000016C B230C0E0              STRH        R3, [R0], #2
  219    00000170 B230D1E0              LDRH        R3, [R1], #2
  220    00000174 B230C0E0              STRH        R3, [R0], #2
  221    00000178 B230D1E0              LDRH        R3, [R1], #2
  222    0000017C B230C0E0              STRH        R3, [R0], #2
  223    00000180 B230D1E0              LDRH        R3, [R1], #2
  224    00000184 B230C0E0              STRH        R3, [R0], #2
  225    00000188 B230D1E0              LDRH        R3, [R1], #2
  226    0000018C B230C0E0              STRH        R3, [R0], #2
  227    00000190 B230D1E0              LDRH        R3, [R1], #2
  228    00000194 B230C0E0              STRH        R3, [R0], #2
  229    00000198 B230D1E0              LDRH        R3, [R1], #2
  230    0000019C B230C0E0              STRH        R3, [R0], #2
  231    000001A0 202042E2              SUB         R2, R2, #(02*01*16)
  232    000001A4 DBFFFFEA              B           Copy_16_1
  233                           
  234                           Copy_16_2:
  235    000001A8 020052E3              CMP         R2, #(02*01*01)         ;
                                                     Copy remaining 16-bit
                                                     words
  236    000001AC 0300003A              BCC         Copy_08_1
  237    000001B0 B230D1E0              LDRH        R3, [R1], #2
  238    000001B4 B230C0E0              STRH        R3, [R0], #2
  239    000001B8 022042E2              SUB         R2, R2, #(02*01*01)
  240    000001BC F9FFFFEA              B           Copy_16_2
  241                           
  242                           ;$PAGE
  243                           Copy_08_1:
  244    000001C0 100052E3              CMP         R2, #(01*01*16)         ;
                                                     Copy chunks of 16 8-bit
                                                     words (16 bytes per
                                                     loop)
  245    000001C4 2100003A              BCC         Copy_08_2
  246    000001C8 0130D1E4              LDRB        R3, [R1], #1
  247    000001CC 0130C0E4              STRB        R3, [R0], #1
  248    000001D0 0130D1E4              LDRB        R3, [R1], #1
  249    000001D4 0130C0E4              STRB        R3, [R0], #1
  250    000001D8 0130D1E4              LDRB        R3, [R1], #1
  251    000001DC 0130C0E4              STRB        R3, [R0], #1
  252    000001E0 0130D1E4              LDRB        R3, [R1], #1
  253    000001E4 0130C0E4              STRB        R3, [R0], #1
  254    000001E8 0130D1E4              LDRB        R3, [R1], #1
  255    000001EC 0130C0E4              STRB        R3, [R0], #1
  256    000001F0 0130D1E4              LDRB        R3, [R1], #1
  257    000001F4 0130C0E4              STRB        R3, [R0], #1
  258    000001F8 0130D1E4              LDRB        R3, [R1], #1
  259    000001FC 0130C0E4              STRB        R3, [R0], #1
  260    00000200 0130D1E4              LDRB        R3, [R1], #1
  261    00000204 0130C0E4              STRB        R3, [R0], #1
  262    00000208 0130D1E4              LDRB        R3, [R1], #1
  263    0000020C 0130C0E4              STRB        R3, [R0], #1
  264    00000210 0130D1E4              LDRB        R3, [R1], #1
  265    00000214 0130C0E4              STRB        R3, [R0], #1
  266    00000218 0130D1E4              LDRB        R3, [R1], #1
  267    0000021C 0130C0E4              STRB        R3, [R0], #1
  268    00000220 0130D1E4              LDRB        R3, [R1], #1
  269    00000224 0130C0E4              STRB        R3, [R0], #1
  270    00000228 0130D1E4              LDRB        R3, [R1], #1
  271    0000022C 0130C0E4              STRB        R3, [R0], #1
  272    00000230 0130D1E4              LDRB        R3, [R1], #1
  273    00000234 0130C0E4              STRB        R3, [R0], #1
  274    00000238 0130D1E4              LDRB        R3, [R1], #1
  275    0000023C 0130C0E4              STRB        R3, [R0], #1
  276    00000240 0130D1E4              LDRB        R3, [R1], #1
  277    00000244 0130C0E4              STRB        R3, [R0], #1
  278    00000248 102042E2              SUB         R2, R2, #(01*01*16)
  279    0000024C DBFFFFEA              B           Copy_08_1
  280                           
  281                           Copy_08_2:
  282    00000250 010052E3              CMP         R2, #(01*01*01)         ;
                                                     Copy remaining 8-bit
                                                     words
  283    00000254 0300003A              BCC         Mem_Copy_END
  284    00000258 0130D1E4              LDRB        R3, [R1], #1
  285    0000025C 0130C0E4              STRB        R3, [R0], #1
  286    00000260 012042E2              SUB         R2, R2, #(01*01*01)
  287    00000264 F9FFFFEA              B           Copy_08_2
  288                           
  289                           
  290                           Mem_Copy_END:
  291    00000268 F81FBDE8              LDMFD       SP!, {R3-R12}           ;
                                                     restore registers from
                                                     stack
  292    0000026C 1EFF2FE1              BX          LR                      ;
                                                     return
  293                           
  294                           
  295                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 624         #
##############################



