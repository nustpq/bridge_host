###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        19/Dec/2014  13:30:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_uart_tx.c
#    Command line =  
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_uart_tx.c" -lcN
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -lb
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -o
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM7TDMI -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\BSP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Driver\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Noah\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Shell\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uCOS-II\Source\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uC-CPU\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-LIB\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uCOS-II\Ports\ARM\Generic\IAR\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\Atmel\AT91SAM7X\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Plugins\uCOS-II\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Demos\Intro\Source\"
#        --interwork --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\List\task_uart_tx.lst
#    Object file  =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\Obj\task_uart_tx.o
#
###############################################################################

E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_uart_tx.c
      1          /*
      2          *********************************************************************************************************
      3          *                               iSAM TEST BENCH AUDIO BRIDGE BOARD APP PACKAGE
      4          *
      5          *                            (c) Copyright 2013 - 2016; Fortemedia Inc.; Nanjing, China
      6          *
      7          *                   All rights reserved.  Protected by international copyright laws.
      8          *                   Knowledge of the source code may not be used to write a similar
      9          *                   product.  This file may only be used in accordance with a license
     10          *                   and should not be redistributed in any way.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                           TASK PACKAGE
     18          *
     19          *                                          Atmel AT91SAM7A3
     20          *                                               on the
     21          *                                      iSAM Audio Bridge Board
     22          *
     23          * Filename      : task_uart_tx.c
     24          * Version       : V1.0.0
     25          * Programmer(s) : PQ
     26          *********************************************************************************************************
     27          * Note(s)       :
     28          *********************************************************************************************************
     29          */
     30          
     31          #include <includes.h>
     32          
     33          //Mem
     34          CPU_INT08U    MemPartition_MsgUART[MsgUARTQueue_SIZE][MsgUARTBody_SIZE];
     35          OS_MEM      * pMEM_Part_MsgUART; //global
     36          //Queue
     37          void        * MsgQ_PCUART2Noah[MsgUARTQueue_SIZE];
     38          void        * MsgQ_Noah2PCUART[MsgUARTQueue_SIZE];
     39          //Event
     40          OS_EVENT    * EVENT_MsgQ_PCUART2Noah;
     41          OS_EVENT    * EVENT_MsgQ_Noah2PCUART;
     42          
     43          
     44          CPU_INT32U  Tx_ReSend_Happens = 0;   // debug use, resend happen times, NOTE: only writable in this task
     45          CPU_INT08U PcCmdTxID          = 0;   // Frame TXD ID
     46             
     47          
     48          /*
     49          *********************************************************************************************************
     50          *                                    App_TaskUART_Tx()
     51          *
     52          * Description : Process UART Transmit related process between Audio Bridge and PC.
     53          *               Wait for data message from other task that want to send to PC.
     54          *
     55          * Argument(s) : p_arg   Argument passed to 'App_TaskUART_Tx()' by 'OSTaskCreate()'.
     56          *
     57          * Return(s)   : none.
     58          *
     59          * Note(s)     : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
     60          *                   used.  The compiler should not generate any code for this statement.
     61          *********************************************************************************************************
     62          */
     63          void App_TaskUART_Tx( void *p_arg )
     64          {    
     65              (void)p_arg;
     66              
     67              CPU_INT08U       errCode ; 
     68              CPU_INT08U       sum ; 
     69              CPU_INT08U      *pTaskMsgIN ;
     70              NOAH_CMD        *pPcCmd ; 
     71              CPU_INT08U       resend_index;  
     72          
     73              pTaskMsgIN  = NULL;
     74              pPcCmd      = NULL;	
     75          	sum         = 0;
     76              errCode     = UNKOW_ERR_RPT ;     
     77              
     78          
     79              pcSendDateToBuf( EVENT_MsgQ_Noah2PCUART, SET_FRAME_HEAD(PcCmdTxID,FRAM_TYPE_EST),  NULL, 0, 0, NULL, 0 ) ;  // send a EST package on startup   
     80              
     81          	while (DEF_TRUE) { 
     82          
     83                  // Noah to Uart transmit
     84                  pTaskMsgIN   = (INT8U *)OSQPend( EVENT_MsgQ_Noah2PCUART, 0, &errCode );
     85                  
     86                  if( pTaskMsgIN != NULL && OS_ERR_NONE == errCode )   {  
     87                    
     88                      pPcCmd  = (NOAH_CMD *)pTaskMsgIN ;             
     89                      if( GET_FRAME_TYPE(pPcCmd->head) == FRAM_TYPE_DATA  ) {  //data frame
     90                          
     91                          for( resend_index = 0; resend_index < MAX_RESEND_TIMES; resend_index++ ) {     
     92                            
     93                              Queue_Write( (void*)pUART_Send_Buf[PC_UART] , CMD_DATA_SYNC1   ); //Sync1
     94                              Queue_Write( (void*)pUART_Send_Buf[PC_UART], CMD_DATA_SYNC2_1 ); //Sync2        
     95                        
     96                              pPcCmd->head  = SET_FRAME_HEAD( PcCmdTxID, FRAM_TYPE_DATA ) ; //set frame ID for data transmit                                
     97                              sum  =  CheckSum(   pPcCmd->head, &(pPcCmd->DataLen), pPcCmd->DataLen + 1); //calculate checksum      
     98                              
     99                              Queue_WriteBuf( pTaskMsgIN,  (void*)pUART_Send_Buf[PC_UART], pPcCmd->DataLen + 2 ); //3Bytes = head(1Bytes) + len(1Bytes)
    100                              Queue_Write( (void*)pUART_Send_Buf[PC_UART], sum   ); //  check sum(1Bytes)
    101                              UART_WriteStart( PC_UART ); //send data  
    102                              
    103                              OSSemPend(ACK_Sem_PCUART, 500, &errCode);//pending 500ms for ACK back                     
    104                              if( OS_ERR_NONE == errCode )   {               
    105                                  OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );    //release mem 
    106                                  PcCmdTxID += 0x40;// this frame send out ok, frame ++,   //0xC0 
    107                                  break;                        
    108                              } 
    109                              
    110                          }
    111                          
    112                          if(  resend_index >= MAX_RESEND_TIMES ) {   // reach max send times                    
    113                              OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );    //release mem a space at least
    114                              pcSendDateToBuf( EVENT_MsgQ_Noah2PCUART, SET_FRAME_HEAD(PcCmdTxID+1,FRAM_TYPE_EST), NULL, 0, 1, NULL, 0) ;   //insert EST  package 
    115                              Global_Conn_Ready = 0;
    116                          } 
    117                          
    118                          if(  resend_index > 1 ) {   // resend happens, debug use      
    119                              Tx_ReSend_Happens ++ ;
    120                          }
    121                          
    122                      } else { //ACK / NAK  frame, no resend action  
    123                        
    124                              Queue_Write( (void*)pUART_Send_Buf[PC_UART], CMD_DATA_SYNC1   ); //Sync1
    125                              Queue_Write( (void*)pUART_Send_Buf[PC_UART], CMD_DATA_SYNC2_1 ); //Sync2   
    126                              Queue_WriteBuf( pTaskMsgIN,(void*)pUART_Send_Buf[PC_UART], 2 );
    127                              //OSQAccept( EVENT_MsgQ_Noah2PCUART, &errCode ); //delete message from queue
    128                              OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );    //release mem 
    129                              UART_WriteStart( PC_UART ); //send data 
    130                              APP_TRACE_DBG(("\r\n>ACK"));
    131                      }                       
    132                   
    133                  }  
    134                  
    135                  ////OSTimeDly(5);		                                     	
    136          	}
    137                 
    138              
    139              
    140              
    141          }
    142          
    143          
    144          
    145          
    146              

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   App_TaskUART_Tx
        40   -> CheckSum
        40   -> OSMemPut
        40   -> OSQPend
        40   -> OSSemPend
        40   -> Queue_Write
        40   -> Queue_WriteBuf
        40   -> UART_WriteStart
        40   -> pcSendDateToBuf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     676  App_TaskUART_Tx
       4  EVENT_MsgQ_Noah2PCUART
       4  EVENT_MsgQ_PCUART2Noah
    2600  MemPartition_MsgUART
      40  MsgQ_Noah2PCUART
      40  MsgQ_PCUART2Noah
       1  PcCmdTxID
       4  Tx_ReSend_Happens
       4  pMEM_Part_MsgUART

 
 2 697 bytes in section .bss
   676 bytes in section .text
 
   676 bytes of CODE memory
 2 697 bytes of DATA memory

Errors: none
Warnings: none
