###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        19/Dec/2014  13:30:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_noah.c
#    Command line =  
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_noah.c" -lcN
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -lb
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -o
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM7TDMI -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\BSP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Driver\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Noah\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Shell\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uCOS-II\Source\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uC-CPU\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-LIB\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uCOS-II\Ports\ARM\Generic\IAR\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\Atmel\AT91SAM7X\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Plugins\uCOS-II\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Demos\Intro\Source\"
#        --interwork --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\List\task_noah.lst
#    Object file  =  
#        E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\task_noah.o
#
###############################################################################

E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_noah.c
      1          /*
      2          *********************************************************************************************************
      3          *                               iSAM TEST BENCH AUDIO BRIDGE BOARD APP PACKAGE
      4          *
      5          *                            (c) Copyright 2013 - 2016; Fortemedia Inc.; Nanjing, China
      6          *
      7          *                   All rights reserved.  Protected by international copyright laws.
      8          *                   Knowledge of the source code may not be used to write a similar
      9          *                   product.  This file may only be used in accordance with a license
     10          *                   and should not be redistributed in any way.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                           TASK PACKAGE
     18          *
     19          *                                          Atmel AT91SAM7A3
     20          *                                               on the
     21          *                                      iSAM Audio Bridge Board
     22          *
     23          * Filename      : task_noah.c
     24          * Version       : V1.0.0
     25          * Programmer(s) : PQ
     26          *********************************************************************************************************
     27          * Note(s)       :
     28          *********************************************************************************************************
     29          */
     30          
     31          
     32          #include <includes.h>
     33          
     34          
     35          
     36          OS_EVENT            *ACK_Sem_PCUART;
     37          volatile CPU_INT08U  Global_Conn_Ready = 0 ; //PC connection on/off state
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                    App_TaskNoah()
     42          *
     43          * Description : Process Comminucation between PC and Audio Bridge.
     44          *               Noah protocol layer related data parsing and processing.
     45          *               This task wait message event from App_TaskUART_Rx(). Check if the Noah layer data is 
     46          *               valid in the message. And send decoded data to App_TaskCMDParse().
     47          *
     48          * Argument(s) : p_arg   Argument passed to 'App_TaskNoah()' by 'OSTaskCreate()'.
     49          *
     50          * Return(s)   : none.
     51          *
     52          * Note(s)     : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
     53          *                   used.  The compiler should not generate any code for this statement.
     54          *********************************************************************************************************
     55          */
     56          void App_TaskNoah( void *p_arg )
     57          { 
     58              
     59              (void)p_arg;
     60              
     61              NOAH_CMD   *pNoahCmd ;    
     62              CPU_INT08U *pCmdBuf ;
     63              CPU_INT08U  rxID ; 
     64              CPU_INT08U  PcCmdRxID ;
     65              CPU_INT08U  sum ;
     66              CPU_INT08U  AckBuf[2];   
     67              CPU_INT08U  err ;
     68              CPU_INT08U *pTaskMsgIN ;  
     69              CPU_INT08U *pMsg ;     
     70              
     71              pTaskMsgIN  = NULL;
     72              pMsg        = NULL;      
     73              
     74              while( DEF_TRUE ) {     
     75                  
     76                  pTaskMsgIN  = (INT8U *)OSQPend( EVENT_MsgQ_PCUART2Noah, 0, &err );   
     77                  
     78                  if( pTaskMsgIN != NULL && OS_ERR_NONE == err )   {
     79                     
     80                      pCmdBuf  = pTaskMsgIN; // char point to the data buffer
     81                      pNoahCmd = (NOAH_CMD *)pCmdBuf ; //change to NOAH_CMD type
     82                      rxID     = GET_FRAME_ID( pNoahCmd->head ) ; //get frame ID, index       
     83                      sum      = pNoahCmd->checkSum; //get check sum data  
     84                      
     85                      LED_Toggle(LED_DS2);           
     86                      APP_TRACE_DBG(("\r\n<"));
     87                      switch( GET_FRAME_TYPE( pNoahCmd->head ) ) {// GET_FRAME_TYPE(pNoahCmd->head)  get frame type 
     88                        
     89                          case FRAM_TYPE_DATA :  
     90                            
     91                              if( (sum == 0) || ( sum == CheckSum(0,pCmdBuf, pNoahCmd->DataLen + 2)) ) {   
     92                                  
     93                                  pcSendDateToBuf( EVENT_MsgQ_Noah2PCUART, SET_FRAME_HEAD(rxID,FRAM_TYPE_ACK), NULL, 0, 0, NULL, 0 ) ;  // ACK  
     94                                  //OSTimeDly(1); //wait for ack sent
     95                                  APP_TRACE_DBG(("< [0x%2x>0x%2x][",PcCmdRxID,rxID));
     96                                  for(unsigned int i = 0; i<pNoahCmd->DataLen; i++){   
     97                                      APP_TRACE_DBG((" %2X", *(unsigned char*)(pNoahCmd->Data+i) )); 
     98                                  }
     99                                  APP_TRACE_DBG((" ]")); 
    100                                  
    101                                  if( (CPU_INT08U)(PcCmdRxID + 0x40) == rxID ) { // check if frameID repeat  
    102                                      PcCmdRxID = rxID ; //save this frameID
    103                                      
    104                                      APP_TRACE_DBG(("<"));
    105                                      err = OSQPost( EVENT_MsgQ_Noah2CMDParse, pTaskMsgIN );   //send data to MsgQ_Noah2CMDParse message queue   
    106               
    107                                      if( OS_ERR_NONE != err )  { 
    108                                          AckBuf[0] = CMD_ERR_RPT ;
    109                                          AckBuf[1] = CMD_ERR ;                
    110                                          pcSendDateToBuf( EVENT_MsgQ_Noah2PCUART, FRAM_TYPE_DATA, AckBuf, 2, 0, NULL, 0 ) ; //send data: command error status                                 
    111                                          OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );            
    112                                      }                                               
    113                                  } else {
    114                                      APP_TRACE_DBG(("PcCmdRxID Err: expect 0x%X, get 0x%X",PcCmdRxID+0x40,rxID)); 
    115                                  }
    116                                  
    117                              } else {                
    118                                  pcSendDateToBuf( EVENT_MsgQ_Noah2PCUART, SET_FRAME_HEAD(rxID,FRAM_TYPE_NAK), NULL, 0, 0, NULL, 0 ) ;  // NAK   
    119                              
    120                              }  
    121                          break ;  
    122                          
    123                          case FRAM_TYPE_EST : //establish frame, reset all related buffer buffer          
    124                              
    125                              pcSendDateToBuf( EVENT_MsgQ_Noah2PCUART, SET_FRAME_HEAD(rxID,FRAM_TYPE_ESTA), NULL, 0, 1, NULL, 0 ) ;  // ESTA                      
    126                              OSSemPost(ACK_Sem_PCUART);  //end the resend pending--                     
    127                              OSTimeDly(10); //wait for the TX buffer is empty 
    128                              while( Queue_NData(pUART_Send_Buf[PC_UART]) >0 ) {
    129                                  OSTimeDly(1);                          
    130                              }                     
    131                              OSSemSet(ACK_Sem_PCUART, 0, &err);// clear the sem
    132                              
    133                          case FRAM_TYPE_ESTA :
    134                            
    135                              PcCmdRxID = 0xC0 ; // ? why 0x40  make sure there can be many same setup frame
    136                              PcCmdTxID = rxID ; //                    
    137                              
    138                              //Reset all UART CMD related buffer and release mem 
    139                              do{  //reset mem used by  EVENT_MsgQ_Noah2PCUART                    
    140                                  pMsg   = (INT8U *)OSQAccept( EVENT_MsgQ_Noah2PCUART, &err );
    141                                  OSMemPut( pMEM_Part_MsgUART, pMsg ); 
    142                              } while ( pMsg != NULL && OS_ERR_NONE == err ) ; 
    143                              
    144                              do{  //reset mem used by  EVENT_MsgQ_PCUART2Noah                  
    145                                  pMsg   = (INT8U *)OSQAccept( EVENT_MsgQ_PCUART2Noah, &err );
    146                                  OSMemPut( pMEM_Part_MsgUART, pMsg ); 
    147                              } while ( pMsg != NULL && OS_ERR_NONE == err ) ; 
    148                                 
    149                              Queue_Flush( pUART_Send_Buf[PC_UART] ); //clear uart send&rec data queue
    150                              Queue_Flush( pUART_Rece_Buf[PC_UART] );  
    151                              
    152                              //FuncStkCtr.BufTail = 0 ;   //clear exe function buffer
    153                              //FuncStkCtr.BufHead = 0 ;                 
    154                              Global_Conn_Ready = 1 ;
    155                              OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );
    156                              APP_TRACE_DBG(("EST/ESTA"));    
    157                          break ;         
    158                                  
    159                          case FRAM_TYPE_ACK :
    160                            
    161                              if( rxID == PcCmdTxID ) {                       
    162                                  OSSemPost(ACK_Sem_PCUART);                        
    163                              }  
    164                              OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );
    165                              APP_TRACE_DBG(("ACK"));
    166                          break ;
    167                          
    168                          case FRAM_TYPE_NAK :
    169                                  // dismiss NAK, there will be a resend if no ACK got
    170                              OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN ); 
    171                              APP_TRACE_DBG(("NAK")); 
    172                          break;               
    173                          
    174                          default :
    175                              OSMemPut( pMEM_Part_MsgUART, pTaskMsgIN );     
    176                          break ;              
    177                      } 
    178                      
    179                      //release mem             
    180                     
    181                  }         
    182                   
    183                  ////OSTimeDly(2);   //use OSQPend(), no delay needed. 
    184                  
    185              }        
    186              
    187              
    188          }
    189          
    190          
    191          
    192              

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   App_TaskNoah
        56   -> CheckSum
        56   -> LED_Toggle
        56   -> OSMemPut
        56   -> OSQAccept
        56   -> OSQPend
        56   -> OSQPost
        56   -> OSSemPost
        56   -> OSSemSet
        56   -> OSTimeDly
        56   -> Queue_Flush
        56   -> Queue_NData
        56   -> pcSendDateToBuf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ACK_Sem_PCUART
     932  App_TaskNoah
       1  Global_Conn_Ready

 
   5 bytes in section .bss
 932 bytes in section .text
 
 932 bytes of CODE memory
   5 bytes of DATA memory

Errors: none
Warnings: none
