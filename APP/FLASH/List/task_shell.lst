###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.3.6832/W32 for ARM        21/Jul/2014  19:24:40
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  arm
#    Endian       =  little
#    Source file  =  
#        E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_shell.c
#    Command line =  
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_shell.c" -lcN
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -lb
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\List\" -o
#        "E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\FLASH\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM7TDMI -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\BSP\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Driver\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Noah\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\Shell\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uCOS-II\Source\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uC-CPU\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-LIB\" -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-CPU\ARM\IAR\" -I "E:\SVN Dir\PQ\iSAM
#        Test Bench\Bridge_Host_OS\APP\..\uCOS-II\Ports\ARM\Generic\IAR\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\Atmel\AT91SAM7X\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Plugins\uCOS-II\" -I
#        "E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\..\uC-Probe\Target\Demos\Intro\Source\"
#        --interwork --cpu_mode arm -On --use_c++_inline
#    List file    =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\List\task_shell.lst
#    Object file  =  
#        E:\SVN Dir\PQ\iSAM Test
#        Bench\Bridge_Host_OS\APP\FLASH\Obj\task_shell.o
#
###############################################################################

E:\SVN Dir\PQ\iSAM Test Bench\Bridge_Host_OS\APP\task_shell.c
      1          /*
      2          *********************************************************************************************************
      3          *                               iSAM TEST BENCH AUDIO BRIDGE BOARD APP PACKAGE
      4          *
      5          *                            (c) Copyright 2013 - 2016; Fortemedia Inc.; Nanjing, China
      6          *
      7          *                   All rights reserved.  Protected by international copyright laws.
      8          *                   Knowledge of the source code may not be used to write a similar
      9          *                   product.  This file may only be used in accordance with a license
     10          *                   and should not be redistributed in any way.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                           TASK PACKAGE
     18          *
     19          *                                          Atmel AT91SAM7A3
     20          *                                               on the
     21          *                                      iSAM Audio Bridge Board
     22          *
     23          * Filename      : task_shell.c
     24          * Version       : V1.0.0
     25          * Programmer(s) : PQ
     26          *********************************************************************************************************
     27          * Note(s)       :
     28          *********************************************************************************************************
     29          */
     30          
     31          
     32          #include <includes.h>
     33          
     34          
     35          
     36          /*
     37          *********************************************************************************************************
     38          *                                    App_TaskGenieShell()
     39          *
     40          * Description : Realize a command shell interface on Debug_UART for real time debug purpose.
     41          *
     42          * Argument(s) : p_arg   Argument passed to 'App_TaskGenieShell()' by 'OSTaskCreate()'.
     43          *
     44          * Return(s)   : none.
     45          *
     46          * Note(s)     : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
     47          *                   used.  The compiler should not generate any code for this statement.
     48          *********************************************************************************************************
     49          */
     50          void App_TaskGenieShell( void *p_arg )
     51          {
     52            
     53              (void)p_arg;     
     54            
     55              CPU_INT08U  index ;		/*index is the pointer of commandbuf */
     56              CPU_INT08U  num ;   
     57              CPU_CHAR    ch ;	    
     58              CPU_CHAR    CommandBuf[ MaxLenComBuf + 1 ];	/*store '\0'*/
     59              CPU_INT08U  (*Func)(CPU_INT08U argc, CPU_CHAR **argv); 
     60              CPU_CHAR    *argv[10];
     61              CPU_INT08U  argc;  
     62              CPU_INT08U  error_code;  
     63              
     64              index  =  0 ;
     65              CommandBuf[0] = '\0';    
     66                          		
     67              InitCommands();     
     68          	OSTimeDly(200);
     69          	
     70              /*To be done: Login & Password*/
     71              UART_SHELL_SEND_STR(( "\n\rLaunching Genieshell, press any to continue..."));	   
     72              UART_SHELL_GET_BYTE(());
     73              UART_SHELL_SEND_STR(("\n\r>"));    
     74              
     75              while (DEF_TRUE) { 
     76                
     77                  do {	    //only accept a-z,0-9,A-Z,.,space,/,-
     78          	      ch = UART_SHELL_GET_BYTE(());	   
     79                    
     80                  } while(  !(   (ch>='0'&&ch<='9')||(ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z')\
     81                               ||(ch=='.')||(ch==' ')||(ch=='-')||(ch=='/')\
     82                               ||(ch=='\r')||(ch=='\b')||(ch==',')  )  );
     83          		
     84                  switch(ch) {
     85                    
     86                      case '\r':				//enter
     87                          if ( index == 0 ){     //commandbuf is null,begin a new line
     88                              UART_SHELL_SEND_STR(("\n\r>"));     
     89                              
     90                          } else {
     91                            
     92                              if(CommandBuf[index-1]==' ') {
     93                                  index--;			//get rid of the end space
     94                              }
     95                              CommandBuf[index] = '\0';
     96                              //UART_SHELL_SEND_STR("\n\rThe command is %s",CommandBuf);
     97                              num = CommandParse( CommandBuf,&argc,argv );	//analys the argv in the commandbuf
     98                              if( num == ERRORCOMMAND ){             	//error or none exist command
     99                                  index = 0;
    100                                  CommandBuf[index] = '\0';
    101                                  //UART_SHELL_SEND_STR("\n\rError command is %s",CommandBuf);
    102                                  UART_SHELL_SEND_STR(("Error: bad command or filename."));
    103                                  UART_SHELL_SEND_STR(("\n\r>"));
    104                                  
    105                              } else {                      
    106                                  Func = ShellComms[num].CommandFunc;	//call corresponding CommandFunc
    107                                  error_code = Func(argc,argv) ;
    108                                  if( error_code == 1 ) {
    109                                    UART_SHELL_SEND_STR(("Error : number of parameters error..."));  
    110                                    
    111                                  } else if(error_code == 2 ) {
    112                                    UART_SHELL_SEND_STR(("Error : parameters content error ..."));
    113                                    
    114                                  } else if(error_code == 3 ) {
    115                                     UART_SHELL_SEND_STR(("Error : Function execution error ..."));
    116                                     
    117                                  } else if(error_code > 3) {
    118                                     UART_SHELL_SEND_STR(("Error : Unknown error ..."));
    119                                     
    120                                  }
    121                                  index = 0;
    122                                  CommandBuf[index] = '\0';
    123                                  LED_Toggle(LED_DS2);
    124                                  UART_SHELL_SEND_STR(("\n\r>")); 
    125                                  
    126                              }
    127                          }
    128                      break;
    129              
    130                      case '\b':				//backspace
    131                          if ( index==0 ){		//has backed to first one
    132                              //do nothing
    133                          } else {
    134                              index--;			   //pointer back once                
    135                              UART_SHELL_SEND_BYTE(('\b'));	//cursor back once
    136                              UART_SHELL_SEND_BYTE((' '));	      //earse last char in screen
    137                              UART_SHELL_SEND_BYTE(('\b'));		//cursor back again
    138                                               
    139                          }
    140                      break;
    141                  
    142                      case ' ':               //don't allow continuous or begin space(' ')
    143                          if((CommandBuf[index-1] == ' ')||(index==0)||( index>MaxLenComBuf) ){
    144                              //do nothing
    145                          } else {
    146                              CommandBuf[index] = ch;
    147                              index++;
    148                              UART_SHELL_SEND_BYTE((ch));  //display and store ch                   
    149                          }
    150                      break;
    151              
    152                      default:				//normal key
    153                          if ( index> MaxLenComBuf ){	//the buf reached MAX 
    154                          //do nothing
    155                          } else {
    156                              CommandBuf[index] = ch;
    157                              index++;
    158                              UART_SHELL_SEND_BYTE((ch));  //display and store ch                   
    159                          }
    160                      break;
    161                      
    162          	}  //switch end
    163                  
    164                  
    165              OSTimeDly(10);
    166                  
    167              }
    168              
    169              
    170          }
    171          
    172          
    173          
    174          
    175              

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     184   App_TaskGenieShell
       184   -- Indirect call
       184   -> BSP_Ser_Printf
       184   -> BSP_Ser_RdByte
       184   -> BSP_Ser_WrByte
       184   -> CommandParse
       184   -> InitCommands
       184   -> LED_Toggle
       184   -> OSTimeDly


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "Error : Function exec...">
      28  ?<Constant "Error : Unknown error...">
      40  ?<Constant "Error : number of par...">
      40  ?<Constant "Error : parameters co...">
      32  ?<Constant "Error: bad command or...">
       4  ?<Constant "\n\r>">
      52  ?<Constant "\n\rLaunching Genieshel...">
     924  App_TaskGenieShell

 
 236 bytes in section .rodata
 924 bytes in section .text
 
 924 bytes of CODE  memory
 236 bytes of CONST memory

Errors: none
Warnings: 3
